(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[544],{12769:function(){},35883:function(){},52361:function(){},94616:function(){},65005:function(){},15130:function(){},49879:function(){},48707:function(e,t,r){"use strict";r.d(t,{$:function(){return i},f:function(){return c}});var n=r(3827),s=r(64090),o=r(24370),a={src:"/_next/static/media/etherlinkLogo.5b44e59c.webp"};let i=e=>{let t=void 0===e.name?e.isTezos?"Tezos":"Etherlink":e.name;return(0,n.jsxs)("span",{className:"flex items-center",children:[e.isTezos?(0,n.jsx)(o.f,{className:"inline w-6 h-6 p-1 mr-1 bg-white rounded-full"}):(0,n.jsx)("img",{src:a.src,alt:"Etherlink Logo",className:"inline w-6 h-6 mr-1 rounded-full"}),t&&(0,n.jsx)("span",{children:t})]})},c=(0,s.memo)(i)},24370:function(e,t,r){"use strict";r.d(t,{x:function(){return o},f:function(){return s}});var n=r(3827);let s=e=>(0,n.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 47 64",...e,children:(0,n.jsx)("path",{fill:"#2C7DF7",d:"M30.252 63.441c-4.55 0-7.864-1.089-9.946-3.267-2.08-2.177-3.121-4.525-3.121-7.041 0-.92.181-1.694.544-2.323a3.993 3.993 0 0 1 1.489-1.489c.629-.363 1.403-.544 2.323-.544.92 0 1.693.181 2.323.544.629.363 1.125.86 1.488 1.489.363.629.544 1.403.544 2.323 0 1.113-.266 2.02-.798 2.722-.533.702-1.162 1.161-1.888 1.38.63.87 1.622 1.487 2.977 1.85 1.355.388 2.71.581 4.065.581 1.887 0 3.593-.508 5.118-1.524 1.524-1.017 2.65-2.517 3.376-4.501.726-1.984 1.089-4.235 1.089-6.752 0-2.734-.4-5.07-1.198-7.005-.775-1.96-1.924-3.412-3.449-4.356a9.21 9.21 0 0 0-4.936-1.415c-1.162 0-2.613.484-4.356 1.452l-3.194 1.597v-1.597L37.076 16.4H17.185v19.89c0 1.646.363 3.001 1.089 4.066s1.839 1.597 3.34 1.597c1.16 0 2.274-.387 3.339-1.162a11.803 11.803 0 0 0 2.758-2.83c.097-.219.218-.376.363-.473a.723.723 0 0 1 .472-.181c.266 0 .58.133.944.4.339.386.508.834.508 1.342a9.243 9.243 0 0 1-.182 1.017c-.822 1.839-1.96 3.242-3.412 4.21a8.457 8.457 0 0 1-4.79 1.452c-4.308 0-7.285-.847-8.93-2.54-1.645-1.695-2.468-3.994-2.468-6.897V16.4H.052v-3.703h10.164v-8.42L7.893 1.952V.066h6.751l2.54 1.306v11.325l26.28-.072 2.614 2.613-16.116 16.116a10.807 10.807 0 0 1 3.049-.726c1.742 0 3.702.557 5.88 1.67 2.202 1.089 3.896 2.59 5.081 4.5 1.186 1.888 1.948 3.703 2.287 5.445.363 1.743.545 3.291.545 4.646 0 3.098-.654 5.977-1.96 8.64-1.307 2.661-3.291 4.645-5.953 5.952-2.662 1.307-5.542 1.96-8.639 1.96z"})}),o=e=>(0,n.jsxs)("svg",{className:e.className,xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",children:[(0,n.jsx)("circle",{className:"opacity-25",cx:"12",cy:"12",r:"10",stroke:"currentColor",strokeWidth:"4"}),(0,n.jsx)("path",{className:"opacity-75",fill:"currentColor",d:"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"})]})},73983:function(e,t,r){"use strict";r.d(t,{v:function(){return o}});let n=r(49079).env.NEXT_PUBLIC_APP_URL||window.location.origin,s="oxfordnet",o={isTestnet:!0,isMock:!1,app:{name:"Tez2Eth",description:"",url:n},bridge:{smartRollupAddress:"sr1T4XVcVtBRzYy52edVTdgup9Kip4Wrmn97",smartRollupNodeBaseUrl:"https://etherlink-rollup-oxford.dipdup.net"},tezos:{network:{name:s,displayName:s[0].toLocaleUpperCase()+s.slice(1),rpcUrl:"https://rpc.tzkt.io/".concat(s)}},etherlink:{network:{name:"Etherlink Testnet",displayName:"Etherlink Testnet",chainId:1337,nativeCurrency:{name:"XTZ",symbol:"XTZ",decimals:18},rpcUrl:"https://etherlink.dipdup.net",blockExplorerUrl:"https://blockscout.dipdup.net"}},providers:{dipDup:{baseUrl:"https://etherlink-bridge-indexer.dipdup.net",webSocketApiBaseUrl:"wss://etherlink-bridge-indexer.dipdup.net"},tzKT:{baseUrl:"https://api.".concat(s,".tzkt.io")}},walletConnectProjectId:"734c08921b9f4f202d6b63a45fb0d800"}},85021:function(e,t,r){"use strict";r.d(t,{EP:function(){return o.useEtherlinkAccount},LI:function(){return n.useIsomorphicLayoutEffect},Mw:function(){return a.useTezosAccount},bp:function(){return s.useAppContext},vU:function(){return i.useLocalTokenTransfersStoreContext}});var n=r(22632),s=r(55836),o=r(99824),a=r(88963),i=r(83711)},55836:function(e,t,r){"use strict";r.r(t),r.d(t,{AppContextProvider:function(){return i},useAppContext:function(){return c}});var n=r(3827),s=r(64090);let o=async()=>{try{return new(await Promise.all([r.e(632),r.e(813),r.e(877),r.e(101),r.e(546)]).then(r.bind(r,32652))).App}catch(e){return null}},a=(0,s.createContext)(null),i=e=>{let[t,r]=(0,s.useState)(null);return(0,s.useEffect)(()=>{o().then(r)},[]),(0,n.jsx)(a.Provider,{value:t,children:e.children})},c=()=>(0,s.useContext)(a)},99824:function(e,t,r){"use strict";r.r(t),r.d(t,{EtherlinkAccountProvider:function(){return p},useEtherlinkAccount:function(){return g}});var n=r(3827),s=r(64030),o=r(64090),a=r(55836),i=r(73983),c=r(24668),l=r(89521);let d={connectionStatus:c.R.NotConnected,address:void 0,connect:l.PL,switchNetwork:l.PL,disconnect:l.PL},u=(e,t)=>e?t===i.v.etherlink.network.chainId?c.R.Connected:c.R.SwitchNetwork:c.R.NotConnected,h=(0,o.createContext)(d),p=e=>{let t=(0,a.useAppContext)(),{address:r,chainId:c,isConnected:l}=(0,s.Zc)(),[p,g]=(0,o.useState)(d),{walletProvider:k}=(0,s.B0)();return(0,o.useEffect)(()=>{(null==t?void 0:t.web3Modal)&&g({address:d.address,connectionStatus:d.connectionStatus,async connect(){await t.web3Modal.open()},async switchNetwork(){await t.web3Modal.switchNetwork(i.v.etherlink.network.chainId)},async disconnect(){await t.web3Modal.disconnect()}})},[null==t?void 0:t.web3Modal]),(0,o.useEffect)(()=>g(e=>({...e,address:r,connectionStatus:u(l,c)})),[r,c,l]),(0,o.useEffect)(()=>{(null==t?void 0:t.etherlinkToolkit)&&t.etherlinkToolkit.setProvider(k)},[null==t?void 0:t.etherlinkToolkit,k]),(0,n.jsx)(h.Provider,{value:p,children:e.children})},g=()=>(0,o.useContext)(h)},22632:function(e,t,r){"use strict";r.r(t),r.d(t,{useIsomorphicLayoutEffect:function(){return n}});let n=r(64090).useLayoutEffect},83711:function(e,t,r){"use strict";r.r(t),r.d(t,{LocalTokenTransfersStoreContextProvider:function(){return c},useLocalTokenTransfersStoreContext:function(){return l}});var n=r(3827),s=r(56842),o=r(64090);let a=(e,t)=>{switch(t.type){case"added":{let r=new Map(e);return r.set(s.P6.getTokenTransferIdOrInitialOperationHash(t.payload),t.payload),r}case"updated":{let r=s.P6.getInitialOperation(t.payload).hash,n=e.has(r),o=s.P6.getTokenTransferIdOrInitialOperationHash(t.payload);if(!n&&!e.has(o))return e;let a=new Map(e);return n&&a.delete(r),a.set(o,t.payload),a}case"deleted":{let r=s.P6.getInitialOperation(t.payload).hash,n=s.P6.getTokenTransferIdOrInitialOperationHash(t.payload);if(console.log(r,n,e),!e.has(r)&&!e.has(n))return e;let o=new Map(e);return o.delete(r),o.delete(n),console.log("###",r,n,e,o),o}}},i=(0,o.createContext)(null),c=e=>{let[t,r]=(0,o.useReducer)(a,new Map),s=(0,o.useMemo)(()=>({localTokenTransfers:t,dispatch:r}),[t]);return(0,n.jsx)(i.Provider,{value:s,children:e.children})},l=()=>(0,o.useContext)(i)},88963:function(e,t,r){"use strict";r.r(t),r.d(t,{TezosAccountProvider:function(){return d},useTezosAccount:function(){return u}});var n=r(3827),s=r(64090),o=r(55836),a=r(24668),i=r(89521);let c={connectionStatus:a.Z.NotConnected,address:void 0,connect:i.PL,disconnect:i.PL},l=(0,s.createContext)(c),d=e=>{let t=(0,o.useAppContext)(),[r,i]=(0,s.useState)(c),d=null==t?void 0:t.beaconTezosWallet;return(0,s.useEffect)(()=>{i(d?{connectionStatus:a.Z.NotConnected,address:void 0,connect:async()=>{try{let{address:e}=await d.requestPermissions();return i(t=>({...t,connectionStatus:e?a.Z.Connected:a.Z.NotConnected,address:e})),e}catch(e){return}},disconnect:()=>(i(e=>({...e,connectionStatus:a.Z.NotConnected,address:void 0})),d.disconnect())}:c)},[d]),(0,s.useEffect)(()=>{if(!d)return;let e=async()=>{try{let e=await d.getActiveAccount(),t=null==e?void 0:e.address;i(e=>({...e,connectionStatus:t?a.Z.Connected:a.Z.NotConnected,address:t}))}catch(e){console.error(e)}};d.subscribeToEvent("ACTIVE_ACCOUNT_SET",async e=>{let{address:t}=e,r=t?a.Z.Connected:a.Z.NotConnected;i(e=>e.address===t&&e.connectionStatus===r?e:{...e,connectionStatus:r,address:t}),console.log("Tezos account changed",t)}),e()},[d]),(0,n.jsx)(l.Provider,{value:r,children:e.children})},u=()=>(0,s.useContext)(l)},24668:function(e,t,r){"use strict";var n,s,o,a;r.d(t,{R:function(){return s},Z:function(){return n}}),(o=n||(n={}))[o.NotConnected=0]="NotConnected",o[o.Connected=10]="Connected",(a=s||(s={}))[a.NotConnected=0]="NotConnected",a[a.SwitchNetwork=1]="SwitchNetwork",a[a.Connected=10]="Connected"},59588:function(e,t,r){"use strict";r.r(t),r.d(t,{ExplorerType:function(){return a},LinkType:function(){return o},getExplorerUrl:function(){return l},getTokenExplorerUrl:function(){return d}});var n,s,o,a,i=r(73983);(n=o||(o={}))[n.Address=0]="Address",n[n.Operation=1]="Operation",n[n.Token=2]="Token",(s=a||(a={}))[s.TzKT=0]="TzKT",s[s.BCD=1]="BCD",s[s.Blockscout=2]="Blockscout";let c={0:"https://".concat(i.v.tezos.network.name,".tzkt.io"),1:"https://better-call.dev/".concat(i.v.tezos.network.name),2:i.v.etherlink.network.blockExplorerUrl},l=(e,t,r)=>{let n=c[r=null!=r?r:e.startsWith("0x")?2:0];return 2===r?"".concat(n,"/").concat(0===t?"address":"tx","/").concat(e):"".concat(n,"/").concat(e)},d=(e,t)=>{let r=c[t=null!=t?t:e.address.startsWith("0x")?2:0];switch(t){case 0:return"".concat(r,"/").concat(e.address,"/tokens/").concat(e.tokenId||"0");case 2:return"".concat(r,"/token/").concat(e.address);case 1:return"".concat(r,"/").concat(e.address)}}},89521:function(e,t,r){"use strict";r.d(t,{Yz:function(){return T},Nn:function(){return v.Z},PL:function(){return w},Bi:function(){return y},e$:function(){return S},sG:function(){return n},S9:function(){return s},Dc:function(){return m},el:function(){return o}});var n={};r.r(n),r.d(n,{capitalize:function(){return a},getShortText:function(){return d},padEnd:function(){return l},padStart:function(){return c}});var s={};r.r(s),r.d(s,{convertTokensAmountToRawAmount:function(){return g},convertTokensRawAmountToAmount:function(){return k},truncateTokensAmountToDecimals:function(){return h}});var o={};r.r(o),r.d(o,{isUserAbortedWalletError:function(){return b}});let a=e=>{var t;return e&&(null===(t=e[0])||void 0===t?void 0:t.toLocaleUpperCase())+e.slice(1)},i=function(e,t,r){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:" ";if(void 0!==String.prototype.padStart)return e.padStart(r,n);let s=e.length;if(r<=s||""==n)return e;let o=r-s,a=n.repeat(Math.ceil(o/n.length));return a.length>o&&(a=a.slice(0,o)),t?a+e:e+a},c=function(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:" ";return void 0!==String.prototype.padStart?e.padStart(t,r):i(e,!0,t,r)},l=function(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:" ";return void 0!==String.prototype.padEnd?e.padEnd(t,r):i(e,!1,t,r)},d=function(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t;return"".concat(e.substring(0,t),"..").concat(e.substring(e.length-r))},u=e=>{for(let t=e.length-1;t>=0;t--){let r=e[t];if("."===r||","===r)return t}return -1},h=(e,t)=>{let r=u(e);if(-1===r)return e;let n=e.substring(0,r);return t?n+e.substring(r,r+1+t):n},p=/[^0-9]/g,g=(e,t)=>{try{let r=h(e,t),n=u(r),s=t&&-1!==n&&n!==r.length-1?t-(r.length-n-1):t,o=BigInt(10**s),a=r.replace(p,"");return BigInt(a)*o}catch(e){return console.error(e),null}},k=(e,t)=>{let r=e.toString(10);if(!t)return r;let n=r.length-t,s=n>0?r.substring(0,n)+"."+r.substring(n):"0."+c(r,t,"0"),o=-1;for(let e=s.length-1;e>=0;e--){let t=s[e];if("."===t||","===t){o=e-1;break}if("0"!==t){o=e;break}}return o>-1?s.substring(0,o+1):s};var T=r(59588),f=r(24227);let b=e=>{var t,r;return void 0!==e&&(e instanceof f.Rd||4001===e.code||(null===(t=e.error)||void 0===t?void 0:t.code)===4001||(null===(r=e.innerError)||void 0===r?void 0:r.code)===4001)};var v=r(75504);let m=e=>new Promise(t=>setTimeout(t,e)),y=()=>{},w=async()=>{},S=e=>"string"==typeof(null==e?void 0:e.message)?e.message:"string"==typeof e?e:"Unknown error"},56842:function(e,t,r){"use strict";r.d(t,{P6:function(){return U},Pl:function(){return tl},ft:function(){return eU},gu:function(){return Q},hj:function(){return q},in:function(){return eu},jC:function(){return ej},vp:function(){return en},wy:function(){return eO},xh:function(){return eH},xz:function(){return eB}});var n,s,o,a=r(97882),i=r(63936),c=r(4170),l=r(55549),d=r(27725),u=Object.defineProperty,h=(e,t,r)=>t in e?u(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,p=(e,t)=>{for(var r in t)u(e,r,{get:t[r],enumerable:!0})},g=(e,t,r)=>(h(e,"symbol"!=typeof t?t+"":t,r),r),k=class extends Error{constructor(e,t){super(e,t),g(this,"name"),this.name=this.constructor.name}},T=class extends k{},f=class e extends k{static getMessage(e,t){return"Response Error [Code: ".concat(e,"]. Content = ").concat(t)}constructor(t,r){super(e.getMessage(t,r))}},b=(e,t)=>e===t,v=(e,t,r)=>{if(null===t||null===r||t.length!==r.length)return!1;let n=t.length;for(let s=0;s<n;s++)if(!e(t[s],r[s]))return!1;return!0},m=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:b,r=null,n=null;return function(){return v(t,r,arguments)||(n=e.apply(null,arguments)),r=arguments,n}},y={};p(y,{isArray:()=>w,isDisposable:()=>C,isReadonlyArray:()=>S});var w=e=>Array.isArray(e),S=e=>Array.isArray(e),C=e=>"function"==typeof(null==e?void 0:e[Symbol.dispose]),B={};p(B,{trimSlashes:()=>D});var D=e=>{let t=e.startsWith("/"),r=e.endsWith("/");return t&&r?e.slice(1,-1):t?e.slice(1):r?e.slice(0,-1):e},A={};p(A,{convertAddressToBytes:()=>_,convertBytesToAddress:()=>P});var _=function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=(0,a.aZ)(e);return t?"0x"+r:r},P=e=>(e.startsWith("0x")&&(e=e.substring(2)),(0,a.mZ)(e)),N={};p(N,{isTezosToken:()=>x,toDisplayString:()=>z});var x=e=>"native"===e.type||"fa1.2"===e.type||"fa2"===e.type,L=e=>{if(!e)return"[token is ".concat(null===e?"null":"undefined","]");switch(e.type){case"native":return"[native token]";case"erc20":return"[".concat(e.address," | ERC-20]");case"fa1.2":return"[".concat(e.address," | FA1.2]");case"fa2":return"[".concat(e.address," | FA2 | Id: ").concat(e.tokenId,"]");default:return"[unknown token type]"}},O=e=>e.reduce((e,t,r,n)=>e+L(t)+(r<n.length-1?", ":"]"),"["),z=e=>S(e)?O(e):L(e),I={};p(I,{isAddress:()=>E,isTransaction:()=>W,prepareHexPrefix:()=>M,toChecksumAddress:()=>F});var E=e=>c.UJ(e,!0),R=/^0x[0-9a-f]{64}$/,W=e=>R.test(e),F=e=>i.P8(e),M=(e,t)=>e.startsWith("0x")?t?e:e.substring(2):t?"0x"+e:e,U={};p(U,{convertOperationDataToTokenTransferId:()=>V,convertTokenTransferIdToOperationData:()=>Z,getInitialOperation:()=>H,getTokenTransferIdOrInitialOperationHash:()=>G,isBridgeTokenTransferOwner:()=>K,parseBridgeTokenTransfer:()=>ee,stringifyBridgeTokenTransfer:()=>Y});var Q=((n=Q||{})[n.Deposit=0]="Deposit",n[n.Withdrawal=1]="Withdrawal",n[n.DepositRevert=2]="DepositRevert",n[n.WithdrawalRevert=3]="WithdrawalRevert",n),q=((s=q||{})[s.Pending=0]="Pending",s[s.Created=100]="Created",s[s.Sealed=200]="Sealed",s[s.Finished=300]="Finished",s[s.Failed=400]="Failed",s),j=e=>e.startsWith("0x"),H=e=>0===e.kind?e.tezosOperation:e.etherlinkOperation,G=e=>0===e.status?H(e).hash:e.id;function V(e,t,r){return j(e)||"number"!=typeof r?"".concat(e).concat("_").concat(t.toString(10)):"".concat(e).concat("_").concat(t.toString(10)).concat("_").concat(r.toString(10))}var Z=e=>{if(!e)return null;try{let t=e.split("_");if(!t[0]||!t[1])return null;let r=Number.parseInt(t[1]);if(j(e))return[t[0],r];return t[2]?[t[0],r,Number.parseInt(t[2])]:[t[0],r,null]}catch(e){}return null},K=(e,t)=>e.source===t||e.receiver===t,J=["tezosOperation","etherlinkOperation"],X=["amount"],$=(e,t)=>"bigint"==typeof t?t.toString(10):t,Y=(e,t)=>{try{return JSON.stringify(e,$,t)}catch(e){return""}},ee=e=>{try{let t=JSON.parse(e);for(let e of J)if(t[e])for(let r of X)t[e][r]&&(t[e][r]=BigInt(t[e][r]));return t}catch(e){return null}},et=()=>{},er=class{getUrl(e){return new URL(this.baseUrl+"/"+B.trimSlashes(e))}async getRequestInit(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=new Headers(e.headers);return t.has("Accept")||t.append("Accept","application/json"),t.has("Content-Type")||t.append("Content-Type","application/json"),e.headers=t,e}async fetch(e,t,r){let n=!(arguments.length>3)||void 0===arguments[3]||arguments[3];n&&(r=await this.getRequestInit(r));let s="string"==typeof e?this.getUrl(e):e,o=await fetch(s.href,r);return await this.ensureResponseOk(o),"none"===t?void 0:await ("json"===t?o.json():o.text())}async ensureResponseOk(e){let t;if(!e.ok){try{t=await e.text()}catch(e){t="[unavailable]"}throw new f(e.status,t)}}constructor(e){g(this,"baseUrl"),this.baseUrl=B.trimSlashes(e)}},en=class{addListener(e){return this.listeners.add(e),this}removeListener(e){return this.listeners.has(e)&&this.listeners.delete(e),this}removeAllListeners(){return this.listeners=new Set,this}emit(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];this.listeners.size&&(1===this.listeners.size?this.listeners.values().next().value(...t):[...this.listeners].forEach(e=>e(...t)))}constructor(){g(this,"listeners",new Set)}},es=class{get counter(){return this._counter}set counter(e){this._counter=e}[Symbol.dispose](){this.counterExpirationWatcherId&&clearTimeout(this.counterExpirationWatcherId),this.actionWatchers.forEach(e=>clearTimeout(e))}setTimeout(e){return new Promise(t=>{this.counterExpirationMs&&this.resetCounterExpiration();let r=Math.min(this.counter,this.timeouts.length-1),n=setTimeout(async()=>{this.actionWatchers.delete(n),clearTimeout(n),await e(),t()},this.timeouts[r]);this.actionWatchers.add(n),this.counter++})}resetCounter(){this.counter=0}resetCounterExpiration(){this.counterExpirationWatcherId&&clearTimeout(this.counterExpirationWatcherId),this.counterExpirationWatcherId=setTimeout(()=>{this.resetCounter(),this.counterExpirationWatcherId=void 0},this.counterExpirationMs)}constructor(e,t){this.timeouts=e,this.counterExpirationMs=t,g(this,"counterExpirationWatcherId"),g(this,"actionWatchers",new Set),g(this,"_counter",0)}},eo=e=>e?"string"==typeof e?e:"string"==typeof(null==e?void 0:e.message)?e.message:"[unknown error type]":"[error is ".concat(null===e?"null":"undefined","]"),ea=N.toDisplayString,ei=e=>e?0!==e.status?e.id:"none (".concat(U.getInitialOperation(e).hash,")"):null===e?"null":"undefined",ec=e=>"Bridge Token transfer is ".concat(null===e?"null":"undefined"),el=e=>{var t,r;return e?"Bridge Token Transfer:\n  Id: ".concat(e&&0!==e.status?e.id:"none","\n  Kind: ").concat(Q[e.kind],"\n  Status: ").concat(q[e.status],"\n  Source: ").concat(e.source,"\n  Receiver: ").concat(e.receiver,"\n  Tezos operation hash: ").concat(null==e?void 0:null===(t=e.tezosOperation)||void 0===t?void 0:t.hash,"\n  Etherlink operation hash: ").concat(null==e?void 0:null===(r=e.etherlinkOperation)||void 0===r?void 0:r.hash,"\n\n"):ec(e)},ed=e=>e?"Bridge Token Transfer [".concat(ei(e),"]:\n\n").concat(U.stringifyBridgeTokenTransfer(e,2),"\n\n"):ec(e),eu=((o=eu||{})[o.None=0]="None",o[o.Debug=1]="Debug",o[o.Information=2]="Information",o[o.Warning=3]="Warning",o[o.Error=4]="Error",o),eh=e=>({debug:e,log:e,warn:e,error:e,time:e,timeEnd:e,timeLog:e}),ep=eh(et),eg=eh(null),ek=m(e=>({debug:e.debug,log:e.log,warn:e.warn,error:e.error,time:e.time,timeEnd:e.timeEnd,timeLog:e.timeLog})),eT=e=>m(t=>({debug:e,log:t.log,warn:t.warn,error:t.error,time:t.time,timeEnd:t.timeEnd,timeLog:t.timeLog})),ef=eT(et),eb=eT(null),ev=e=>m(t=>({debug:e,log:e,warn:t.warn,error:t.error,time:e,timeEnd:e,timeLog:e})),em=ev(et),ey=ev(null),ew=e=>m(t=>({debug:e,log:e,warn:e,error:t.error,time:e,timeEnd:e,timeLog:e})),eS=ew(et),eC=ew(null),eB=new class{get logger(){return this._logger}get lazyLogger(){return this._lazyLogger}get logLevel(){return this._logLevel}setLogger(e){this.internalLogger=e,this.updateLogger()}setLogLevel(e){this._logLevel=e,this.updateLogger()}updateLogger(){switch(this._logLevel){case 0:this._logger=ep,this._lazyLogger=eg;break;case 1:this._logger=ek(this.internalLogger),this._lazyLogger=ek(this.internalLogger);break;case 2:this._logger=ef(this.internalLogger),this._lazyLogger=eb(this.internalLogger);break;case 3:this._logger=em(this.internalLogger),this._lazyLogger=ey(this.internalLogger);break;case 4:this._logger=eS(this.internalLogger),this._lazyLogger=eC(this.internalLogger)}}constructor(e,t){g(this,"internalLogger"),g(this,"_logLevel",2),g(this,"_logger",ep),g(this,"_lazyLogger",eg),this.internalLogger=e,this._logLevel=t,this.updateLogger()}}(console,0),eD=class extends T{constructor(){super("The TokenBridge is disposed.")}},eA=class e extends k{static getMessage(e){return"Token pair not found for the ".concat(N.toDisplayString(e)," token")}constructor(t){super(e.getMessage(t))}},e_=class e extends k{static getMessage(e,t,r,n){return"".concat(t," has an insufficient balance ").concat(N.toDisplayString(e),". Balance = ").concat(r,". Requested = ").concat(n)}constructor(t,r,n,s){super(e.getMessage(t,r,n,s))}},eP=class e extends k{static getMessage(e){return"The ".concat(ei(e)," token transfer is failed")}constructor(t){super(e.getMessage(t))}},eN=class extends k{constructor(){super("The Tezos signer account is unavailable")}},ex=class extends k{constructor(){super("The Etherlink signer account is unavailable")}},eL=class e{get isDisposed(){return this._isDisposed}addEventListener(e,t){this.ensureIsNotDisposed(),this.events[e].addListener(t)}removeEventListener(e,t){this.ensureIsNotDisposed(),this.events[e].removeListener(t)}removeAllEventListeners(e){this.ensureIsNotDisposed(),this.events[e].removeAllListeners()}async waitForStatus(e,t){if(this.ensureIsNotDisposed(),e.status>=t)return e;let r=0===e.status,n=await (r?this.bridgeComponents.transfersBridgeDataProvider.getOperationTokenTransfers(e):this.bridgeComponents.transfersBridgeDataProvider.getTokenTransfer(e.id)),s=y.isArray(n)?n[0]:n;if((null==s?void 0:s.status)===t)return s;let o=r?U.getInitialOperation(e).hash:e.id,a=this.tokenTransferStatusWatchers.get(o);a||(a=new Map,this.tokenTransferStatusWatchers.set(o,a));let i=a.get(t);if(i)return i.promise;let c=new Promise((e,n)=>{let s=this.tokenTransferStatusWatchers.get(o);if(!s){n("Status watchers map not found for the ".concat(o," token transfer"));return}setTimeout(()=>{try{this.bridgeComponents.transfersBridgeDataProvider[r?"subscribeToOperationTokenTransfers":"subscribeToTokenTransfer"](o),s.set(t,{promise:c,resolve:t=>{this.bridgeComponents.transfersBridgeDataProvider[r?"unsubscribeFromOperationTokenTransfers":"unsubscribeFromTokenTransfer"](o),e(t)},reject:e=>{this.bridgeComponents.transfersBridgeDataProvider[r?"unsubscribeFromOperationTokenTransfers":"unsubscribeFromTokenTransfer"](o),n(e)}})}catch(e){eB.logger.error(eo(e)),n(e)}},0)});return c}async deposit(e,t,r,n){var s,o,a,i,c,l;this.ensureIsNotDisposed();let d=await this.getRequiredTezosSignerAddress(),u="string"==typeof r?r:await this.getRequiredEtherlinkSignerAddress(),h="string"!=typeof r&&r?r:n;null===(s=(o=eB.lazyLogger).log)||void 0===s||s.call(o,"Depositing ".concat(e.toString(10)," ").concat(ea(t)," from ").concat(d," to ").concat(u));let p=await this.bridgeComponents.tokensBridgeDataProvider.getRegisteredTokenPair(t);if(!p){let e=new eA(t);throw eB.logger.error(eo(e)),e}let g=await this.bridgeComponents.balancesBridgeDataProvider.getBalance(d,t);if(e>g.balance){let r=new e_(t,d,g.balance,e);throw eB.logger.error(eo(r)),r}eB.logger.log("The ".concat(d," has enough tokens to deposit ").concat(e));let k=await ("native"===t.type?this.bridgeComponents.tezosBridgeBlockchainService.depositNativeToken({amount:e,etherlinkReceiverAddress:u,ticketHelperContractAddress:p.tezos.ticketHelperContractAddress}):this.bridgeComponents.tezosBridgeBlockchainService.depositNonNativeToken({token:t,amount:e,etherlinkReceiverAddress:u,ticketHelperContractAddress:p.tezos.ticketHelperContractAddress,useApprove:null==h?void 0:h.useApprove,resetFA12Approve:null==h?void 0:h.resetFA12Approve}));eB.logger.log("The deposit operation has been created:",k.hash);let T={kind:0,status:0,source:d,receiver:u,tezosOperation:{hash:k.hash,amount:k.amount,timestamp:k.timestamp,token:t}};return null===(a=(i=eB.lazyLogger).log)||void 0===a||a.call(i,el(T)),null===(c=(l=eB.lazyLogger).debug)||void 0===c||c.call(l,ed(T)),this.emitLocalTokenTransferCreatedEvent(T),{tokenTransfer:T,operationResult:k}}async startWithdraw(e,t,r){let n;this.ensureIsNotDisposed();let s=await this.getRequiredEtherlinkSignerAddress();r||(r=await this.getRequiredTezosSignerAddress());let o=await this.bridgeComponents.tokensBridgeDataProvider.getRegisteredTokenPair(t);if(!o){let e=new eA(t);throw eB.logger.error(eo(e)),e}let a=await this.bridgeComponents.balancesBridgeDataProvider.getBalance(s,t);if(e>a.balance){let r=new e_(t,s,a.balance,e);throw eB.logger.error(eo(r)),r}if(eB.logger.log("The ".concat(s," has enough tokens to withdraw ").concat(e)),"native"===o.tezos.type)n=await this.bridgeComponents.etherlinkBridgeBlockchainService.withdrawNativeToken({amount:e,tezosReceiverAddress:r});else{let s=o.tezos.ticketerContractAddress,a=await this.bridgeComponents.tezosBridgeBlockchainService.getTezosTicketerContent(s);n=await this.bridgeComponents.etherlinkBridgeBlockchainService.withdrawNonNativeToken({amount:e,tezosReceiverAddress:r,tezosTicketerAddress:s,tezosTicketerContent:a,token:t})}let i={kind:1,status:0,source:s,receiver:r,etherlinkOperation:{hash:n.hash,amount:e,timestamp:n.timestamp,token:t}};return this.emitLocalTokenTransferCreatedEvent(i),{tokenTransfer:i,operationResult:n}}async finishWithdraw(e){this.ensureIsNotDisposed();let t=await this.bridgeComponents.tezosBridgeBlockchainService.finishWithdraw({cementedCommitment:e.rollupData.commitment,outputProof:e.rollupData.proof});return{tokenTransfer:e,operationResult:t}}async getTezosSignerAddress(){return this.ensureIsNotDisposed(),this.bridgeComponents.tezosBridgeBlockchainService.getSignerAddress()}async getEtherlinkSignerAddress(){return this.ensureIsNotDisposed(),this.bridgeComponents.etherlinkBridgeBlockchainService.getSignerAddress()}[Symbol.dispose](){this._isDisposed||(y.isDisposable(this.bridgeComponents.tokensBridgeDataProvider)&&this.bridgeComponents.tokensBridgeDataProvider[Symbol.dispose](),y.isDisposable(this.bridgeComponents.balancesBridgeDataProvider)&&this.bridgeComponents.balancesBridgeDataProvider[Symbol.dispose](),y.isDisposable(this.bridgeComponents.transfersBridgeDataProvider)&&this.bridgeComponents.transfersBridgeDataProvider[Symbol.dispose](),this.rejectAndClearAllStatusWatchers(new eD),this.detachEvents(),clearInterval(this.lastCreatedTokenTransfersTimerId),this.lastCreatedTokenTransfers.clear(),this._isDisposed=!0)}getBalance(e,t){return this.bridgeComponents.balancesBridgeDataProvider.getBalance(e,t)}getBalances(e,t){return this.bridgeComponents.balancesBridgeDataProvider.getBalances(e,t)}getRegisteredTokenPair(e){return this.bridgeComponents.tokensBridgeDataProvider.getRegisteredTokenPair(e)}getRegisteredTokenPairs(e){return this.bridgeComponents.tokensBridgeDataProvider.getRegisteredTokenPairs(e)}getTokenTransfer(e){return this.bridgeComponents.transfersBridgeDataProvider.getTokenTransfer(e)}getTokenTransfers(e){return this.bridgeComponents.transfersBridgeDataProvider.getTokenTransfers(e)}getAccountTokenTransfers(e,t){return this.bridgeComponents.transfersBridgeDataProvider.getAccountTokenTransfers(e,t)}getOperationTokenTransfers(e){return this.bridgeComponents.transfersBridgeDataProvider.getOperationTokenTransfers(e)}async getSignerBalances(){let[e,t]=await Promise.all([this.getTezosSignerAddress().then(e=>e?this.getBalances(e):void 0),this.getEtherlinkSignerAddress().then(e=>e?this.getBalances(e):void 0)]);return{tezosSignerBalances:e,etherlinkSignerBalances:t}}async getSignerTokenTransfers(e){let[t,r]=await Promise.all([this.getTezosSignerAddress(),this.getEtherlinkSignerAddress()]),n=t&&r?[t,r]:t||r;return n?this.getAccountTokenTransfers(n,e):[]}subscribeToTokenTransfer(e){this.bridgeComponents.transfersBridgeDataProvider.subscribeToTokenTransfer(e)}unsubscribeFromTokenTransfer(e){this.bridgeComponents.transfersBridgeDataProvider.unsubscribeFromTokenTransfer(e)}subscribeToTokenTransfers(){this.bridgeComponents.transfersBridgeDataProvider.subscribeToTokenTransfers()}unsubscribeFromTokenTransfers(){this.bridgeComponents.transfersBridgeDataProvider.unsubscribeFromTokenTransfers()}subscribeToAccountTokenTransfers(e){this.bridgeComponents.transfersBridgeDataProvider.subscribeToAccountTokenTransfers(e)}unsubscribeFromAccountTokenTransfers(e){this.bridgeComponents.transfersBridgeDataProvider.unsubscribeFromAccountTokenTransfers(e)}subscribeToOperationTokenTransfers(e){this.bridgeComponents.transfersBridgeDataProvider.subscribeToOperationTokenTransfers(e)}unsubscribeFromOperationTokenTransfers(e){this.bridgeComponents.transfersBridgeDataProvider.unsubscribeFromOperationTokenTransfers(e)}unsubscribeFromAllSubscriptions(){this.bridgeComponents.transfersBridgeDataProvider.unsubscribeFromAllSubscriptions()}emitLocalTokenTransferCreatedEvent(e){setTimeout(()=>{this.emitTokenTransferCreatedOrUpdatedEvent(e)},0)}emitTokenTransferCreatedOrUpdatedEvent(e){let t;this.ensureLastCreatedTokenTransfersTimerIsStarted();let r=U.getInitialOperation(e).hash;this.lastCreatedTokenTransfers.has(r)?t="tokenTransferUpdated":(t="tokenTransferCreated",this.lastCreatedTokenTransfers.set(r,[e,Date.now()])),eB.logger.log("Emitting the ".concat(t," event...")),this.events[t].emit(e),eB.logger.log("The ".concat(t," event has been emitted"))}resolveStatusWatcherIfNeeded(e){let t,r;if(0!==e.status&&(t=e.id,r=this.tokenTransferStatusWatchers.get(e.id)),r||(t=U.getInitialOperation(e).hash,r=this.tokenTransferStatusWatchers.get(t))){for(let[t,n]of r)e.status>=t&&(400===e.status?n.reject(new eP(e)):n.resolve(e),r.delete(t));r.size||this.tokenTransferStatusWatchers.delete(t)}}rejectAndClearAllStatusWatchers(e){for(let t of this.tokenTransferStatusWatchers.values()){for(let r of t.values())r.reject(e);t.clear()}this.tokenTransferStatusWatchers.clear()}attachEvents(){this.bridgeComponents.transfersBridgeDataProvider.events.tokenTransferCreated.addListener(this.handleTransfersBridgeDataProviderTokenTransferCreated),this.bridgeComponents.transfersBridgeDataProvider.events.tokenTransferUpdated.addListener(this.handleTransfersBridgeDataProviderTokenTransferUpdated)}detachEvents(){this.bridgeComponents.transfersBridgeDataProvider.events.tokenTransferUpdated.removeListener(this.handleTransfersBridgeDataProviderTokenTransferUpdated),this.bridgeComponents.transfersBridgeDataProvider.events.tokenTransferCreated.removeListener(this.handleTransfersBridgeDataProviderTokenTransferCreated)}ensureIsNotDisposed(){if(this._isDisposed)throw eB.logger.error("Attempting to call the disposed TokenBridge instance"),new eD}ensureLastCreatedTokenTransfersTimerIsStarted(){this.lastCreatedTokenTransfersTimerId||(this.lastCreatedTokenTransfersTimerId=setInterval(()=>{let t=Date.now();for(let r of this.lastCreatedTokenTransfers)t-r[1][1]>e.defaultLastCreatedTokenTransferLifetime&&this.lastCreatedTokenTransfers.delete(r[0])},e.defaultLastCreatedTokenTransfersTimerPeriod))}async getRequiredTezosSignerAddress(){let e=await this.getTezosSignerAddress();if(e)return e;throw new eN}async getRequiredEtherlinkSignerAddress(){let e=await this.getEtherlinkSignerAddress();if(e)return e;throw new ex}constructor(e){g(this,"data"),g(this,"stream"),g(this,"bridgeComponents"),g(this,"events",{tokenTransferCreated:new en,tokenTransferUpdated:new en}),g(this,"tokenTransferStatusWatchers",new Map),g(this,"lastCreatedTokenTransfers",new Map),g(this,"lastCreatedTokenTransfersTimerId"),g(this,"_isDisposed",!1),g(this,"handleTransfersBridgeDataProviderTokenTransferCreated",e=>{this.resolveStatusWatcherIfNeeded(e),this.emitTokenTransferCreatedOrUpdatedEvent(e)}),g(this,"handleTransfersBridgeDataProviderTokenTransferUpdated",e=>{this.resolveStatusWatcherIfNeeded(e),this.events.tokenTransferUpdated.emit(e)}),this.bridgeComponents={tezosBridgeBlockchainService:e.tezosBridgeBlockchainService,etherlinkBridgeBlockchainService:e.etherlinkBridgeBlockchainService,tokensBridgeDataProvider:e.bridgeDataProviders.tokens,balancesBridgeDataProvider:e.bridgeDataProviders.balances,transfersBridgeDataProvider:e.bridgeDataProviders.transfers},this.data={getBalance:this.getBalance.bind(this),getBalances:this.getBalances.bind(this),getRegisteredTokenPair:this.getRegisteredTokenPair.bind(this),getRegisteredTokenPairs:this.getRegisteredTokenPairs.bind(this),getTokenTransfer:this.getTokenTransfer.bind(this),getTokenTransfers:this.getTokenTransfers.bind(this),getAccountTokenTransfers:this.getAccountTokenTransfers.bind(this),getOperationTokenTransfers:this.getOperationTokenTransfers.bind(this),getSignerBalances:this.getSignerBalances.bind(this),getSignerTokenTransfers:this.getSignerTokenTransfers.bind(this)},this.stream={subscribeToTokenTransfer:this.subscribeToTokenTransfer.bind(this),subscribeToTokenTransfers:this.subscribeToTokenTransfers.bind(this),subscribeToAccountTokenTransfers:this.subscribeToAccountTokenTransfers.bind(this),subscribeToOperationTokenTransfers:this.subscribeToOperationTokenTransfers.bind(this),unsubscribeFromTokenTransfer:this.unsubscribeFromTokenTransfer.bind(this),unsubscribeFromTokenTransfers:this.unsubscribeFromTokenTransfers.bind(this),unsubscribeFromAccountTokenTransfers:this.unsubscribeFromAccountTokenTransfers.bind(this),unsubscribeFromOperationTokenTransfers:this.unsubscribeFromOperationTokenTransfers.bind(this),unsubscribeFromAllSubscriptions:this.unsubscribeFromAllSubscriptions.bind(this)},this.attachEvents()}};g(eL,"defaultLastCreatedTokenTransfersTimerPeriod",6e4),g(eL,"defaultLastCreatedTokenTransferLifetime",3e4);var eO=eL,ez=class extends k{constructor(){super("The Tezos signer account is unavailable")}},eI={};function eE(e){let t=e.batch;return(void 0===e.isNeedToReset||e.isNeedToReset)&&t.withContractCall(e.tokenContract.methods.approve(e.approvedAddress,0n)),t.withContractCall(e.tokenContract.methods.approve(e.approvedAddress,e.approvedAmount)),Array.isArray(e.contractCalls)?e.contractCalls.forEach(e=>t.withContractCall(e)):t.withContractCall(e.contractCalls),t}p(eI,{wrapContractCallsWithApprove:()=>eE});var eR={};function eW(e){let t=e.batch.withContractCall(e.tokenContract.methods.update_operators([{add_operator:{owner:e.ownerAddress,operator:e.approvedAddress,token_id:e.tokenId}}]));return Array.isArray(e.contractCalls)?e.contractCalls.forEach(e=>t.withContractCall(e)):t.withContractCall(e.contractCalls),t.withContractCall(e.tokenContract.methods.update_operators([{remove_operator:{owner:e.ownerAddress,operator:e.approvedAddress,token_id:e.tokenId}}])),t}p(eR,{wrapContractCallsWithApprove:()=>eW});var eF={prim:"pair",annots:["%content"],args:[{prim:"nat"},{prim:"option",args:[{prim:"bytes"}]}]},eM=class{async getSignerAddress(){try{return await this.tezosToolkit.signer.publicKeyHash()}catch(e){eB.logger.error(eo(e));return}}async createDepositNativeTokenOperation(e){let t=await this.getNativeTokenTicketHelperContract(e.ticketHelperContractAddress),r=this.packDepositRoutingInfo(e.etherlinkReceiverAddress);return t.methodsObject.deposit({evm_address:this.smartRollupAddress,l2_address:r})}async createDepositNonNativeTokenOperation(e){let t=await this.getNonNativeTokenTicketHelperContract(e.ticketHelperContractAddress),r=this.packDepositRoutingInfo(e.etherlinkReceiverAddress);return t.methodsObject.deposit({rollup:this.smartRollupAddress,receiver:r,amount:e.amount})}async getTezosTicketerContent(e){let t=[...Object.values((await this.tezosToolkit.contract.getStorage(e)).content)],r=this.tezosTicketerContentSchema.Encode(t);return"0x"+(0,l.cz)(r,eF).bytes.slice(2)}async depositNativeTokenInternal(e){return(await this.createDepositNativeTokenOperation(e)).send({amount:Number(e.amount),mutez:!0})}async depositNonNativeTokenInternal(e){var t,r;let n=null===(t=e.useApprove)||void 0===t||t,s=await this.createDepositNonNativeTokenOperation(e),o=this.createBatch();return n&&(o=await ("fa2"===e.token.type?this.wrapContractCallsWithFA2TokenApprove(o,s,e.token,e.ticketHelperContractAddress):this.wrapContractCallsWithFA12TokenApprove(o,s,e.amount,e.token,e.ticketHelperContractAddress,null===(r=e.resetFA12Approve)||void 0===r||r))),o.send()}finishWithdrawInternal(e){return this.tezosToolkit.contract.smartRollupExecuteOutboxMessage({rollup:this.smartRollupAddress,cementedCommitment:e.cementedCommitment,outputProof:e.outputProof})}getCurrentOperationTimestamp(){return new Date().toISOString()}async wrapContractCallsWithFA12TokenApprove(e,t,r,n,s,o){let a=await this.getFA12TokenContract(n.address);return eI.wrapContractCallsWithApprove({batch:e,approvedAddress:s,approvedAmount:r,tokenContract:a,contractCalls:t,isNeedToReset:o})}async wrapContractCallsWithFA2TokenApprove(e,t,r,n){let[s,o]=await Promise.all([this.getFA2TokenContract(r.address),this.getSignerAddress()]);if(!o)throw new ez;return eR.wrapContractCallsWithApprove({batch:e,approvedAddress:n,ownerAddress:o,tokenId:r.tokenId,tokenContract:s,contractCalls:t})}packDepositRoutingInfo(e){return I.prepareHexPrefix(e,!1)}constructor(e){g(this,"smartRollupAddress"),g(this,"tezosToolkit"),g(this,"tezosTicketerContentSchema",new d.V_(eF)),this.smartRollupAddress=e.smartRollupAddress,this.tezosToolkit=e.tezosToolkit}},eU=class extends eM{async depositNativeToken(e){let t=await this.depositNativeTokenInternal(e);return{amount:e.amount,hash:t.opHash,timestamp:this.getCurrentOperationTimestamp(),operation:t}}async depositNonNativeToken(e){let t=await this.depositNonNativeTokenInternal(e);return{amount:e.amount,hash:t.opHash,timestamp:this.getCurrentOperationTimestamp(),operation:t}}async finishWithdraw(e){let t=await this.finishWithdrawInternal(e);return{hash:t.hash,timestamp:this.getCurrentOperationTimestamp(),operation:t}}createBatch(e){return this.tezosToolkit.wallet.batch(e)}getNativeTokenTicketHelperContract(e){return this.tezosToolkit.wallet.at(e)}getNonNativeTokenTicketHelperContract(e){return this.tezosToolkit.wallet.at(e)}getFA12TokenContract(e){return this.tezosToolkit.wallet.at(e)}getFA2TokenContract(e){return this.tezosToolkit.wallet.at(e)}},eQ=[{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"ticketHash",type:"uint256"},{indexed:!1,internalType:"address",name:"ticketOwner",type:"address"},{indexed:!1,internalType:"address",name:"receiver",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"inboxLevel",type:"uint256"},{indexed:!1,internalType:"uint256",name:"inboxMsgId",type:"uint256"}],name:"Deposit",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"ticketHash",type:"uint256"},{indexed:!1,internalType:"address",name:"sender",type:"address"},{indexed:!1,internalType:"address",name:"tiketOwner",type:"address"},{indexed:!1,internalType:"bytes",name:"receiver",type:"bytes"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"outboxLevel",type:"uint256"},{indexed:!1,internalType:"uint256",name:"outboxMsgId",type:"uint256"}],name:"Withdraw",type:"event"},{inputs:[{internalType:"bytes22",name:"ticketer",type:"bytes22"},{internalType:"bytes",name:"content",type:"bytes"},{internalType:"address",name:"owner",type:"address"}],name:"getBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"ticketReceiver",type:"address"},{internalType:"address",name:"receiver",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bytes22",name:"ticketer",type:"bytes22"},{internalType:"bytes",name:"identifier",type:"bytes"}],name:"inboxDeposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"ticketOwner",type:"address"},{internalType:"bytes",name:"receiver",type:"bytes"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"bytes22",name:"ticketer",type:"bytes22"},{internalType:"bytes",name:"content",type:"bytes"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function"}],eq={withdrawNativeTokenPrecompileAddress:"0x0000000000000000000000000000000000000020",withdrawNonNativeTokenPrecompileAddress:"0x0000000000000000000000000000000000000040"},ej=class{async getSignerAddress(){try{return(await this.web3.eth.getAccounts())[0]||this.web3.eth.defaultAccount}catch(e){eB.logger.error(eo(e));return}}withdrawNativeToken(e){throw Error("Withdrawal of native tokens is not supported yet")}async withdrawNonNativeToken(e){let[t,r,n]=await Promise.all([this.createDepositNonNativeTokenOperation(e),this.web3.eth.getGasPrice(),this.getSignerAddress()]),s=t.encodeABI(),o=await this.web3.eth.sendTransaction({from:n,to:this.withdrawNonNativeTokenPrecompiledAddress,gas:30000n,gasPrice:r,data:s});return{hash:o.transactionHash.toString(),amount:e.amount,timestamp:this.getCurrentTransactionTimestamp(),receipt:o}}createDepositNativeTokenOperation(e){throw Error("Withdrawal of native tokens is not supported yet")}createDepositNonNativeTokenOperation(e){let t=A.convertAddressToBytes(e.tezosReceiverAddress,!0),r=A.convertAddressToBytes(e.tezosTicketerAddress,!0),n=A.convertAddressToBytes(e.tezosTicketerAddress);return Promise.resolve(this.withdrawNonNativeTokenPrecompile.methods.withdraw(e.token.address,t+n,e.amount,r,e.tezosTicketerContent))}getCurrentTransactionTimestamp(){return new Date().toISOString()}constructor(e){g(this,"web3"),g(this,"withdrawNativeTokenPrecompiledAddress"),g(this,"withdrawNonNativeTokenPrecompiledAddress"),g(this,"withdrawNonNativeTokenPrecompile"),this.web3=e.web3,this.withdrawNativeTokenPrecompiledAddress=e.withdrawNativeTokenPrecompileAddress||eq.withdrawNativeTokenPrecompileAddress,this.withdrawNonNativeTokenPrecompiledAddress=e.withdrawNonNativeTokenPrecompileAddress||eq.withdrawNonNativeTokenPrecompileAddress,this.withdrawNonNativeTokenPrecompile=new this.web3.eth.Contract(eQ,this.withdrawNonNativeTokenPrecompiledAddress)}},eH=class{getRegisteredTokenPair(e){var t,r,n;return Promise.resolve(("native"===e.type?this.tokenPairsByTokenMap[e.type]:"fa1.2"===e.type||"erc20"===e.type?null===(t=this.tokenPairsByTokenMap[e.type])||void 0===t?void 0:t[e.address]:"fa2"===e.type?null===(n=this.tokenPairsByTokenMap[e.type])||void 0===n?void 0:null===(r=n[e.address])||void 0===r?void 0:r[e.tokenId]:null)||null)}getRegisteredTokenPairs(e){if(!e)return Promise.resolve(this.tokenPairs);let t=e.offset||0,r=e.limit&&e.limit+t;return Promise.resolve(this.tokenPairs.slice(t,r))}createTokenPairsByTokenMap(e){let t={};for(let r of e)"native"===r.tezos.type?t.native=r:(t[r.tezos.type]||(t[r.tezos.type]={}),"fa1.2"===r.tezos.type?t[r.tezos.type][r.tezos.address]=r:(t[r.tezos.type][r.tezos.address]||(t[r.tezos.type][r.tezos.address]={}),t[r.tezos.type][r.tezos.address][r.tezos.tokenId]=r)),"native"!==r.etherlink.type&&(t[r.etherlink.type]||(t[r.etherlink.type]={}),"erc20"===r.etherlink.type&&(t[r.etherlink.type][r.etherlink.address]=r));return t}constructor(e){this.tokenPairs=e,g(this,"tokenPairsByTokenMap"),this.tokenPairsByTokenMap=this.createTokenPairsByTokenMap(e)}},eG=class extends k{constructor(e){super("TzKT won't be able to receive a balance of the ".concat(N.toDisplayString(e),") token. Only Tezos tokens."))}},eV=e=>{var t,r;return!!(e&&(null===(t=e.account)||void 0===t?void 0:t.address)&&e.token&&(null===(r=e.token.contract)||void 0===r?void 0:r.address)&&("fa1.2"===e.token.standard||"fa2"===e.token.standard))},eZ=e=>({token:"fa2"===e.token.standard?{type:e.token.standard,address:e.token.contract.address,tokenId:e.token.tokenId||"0"}:{type:e.token.standard,address:e.token.contract.address},balance:e.balance?BigInt(e.balance):0n}),eK=e=>{try{let t;let r=[];for(let n of e){if(!eV(n))continue;let e=eZ(n);r.push(e),t=n.account.address}return t&&r.length?{address:t,tokenBalances:r}:null}catch(e){return eB.logger.error("Token Balances DTOs mapping error.",eo(e)),null}},eJ=e=>{try{if(!eV(e[0]))return null;let t=eZ(e[0]);return t.address=e[0].account.address,t}catch(e){return eB.logger.error("Token Balance DTOs mapping error.",eo(e)),null}},eX=class e extends er{async getBalance(e,t){var r,n,s,o;if(!N.isTezosToken(t)){let e=new eG(t);throw eB.logger.error(e),e}null===(r=(n=eB.lazyLogger).log)||void 0===r||r.call(n,"Getting balance of the ".concat(ea(t)," token for the ").concat(e," address"));let a=await ("native"===t.type?this.getNativeTezosTokenAccountBalance(e,!1):this.getNonNativeTezosTokenBalance(e,t));return null===(s=(o=eB.lazyLogger).log)||void 0===s||s.call(o,"The balance of the ".concat(ea(t)," token for the ").concat(e," address is ").concat(a.balance)),a}async getBalances(e,t){return y.isReadonlyArray(t)?this.getTezosTokenBalances(e,t):this.getAllTokenBalances(e,null==t?void 0:t.offset,null==t?void 0:t.limit)}async getAllTokenBalances(e,t,r){let n;if(eB.logger.log("Getting balances of the all tokens for the ".concat(e," address")),t)n=await this.getNonNativeTezosTokenBalances(e,null,t,r);else{let[s,o]=await Promise.all([this.getNativeTezosTokenAccountBalance(e,!0),this.getNonNativeTezosTokenBalances(e,null,t,r)]);(n=o).tokenBalances.unshift(s.tokenBalances[0])}return eB.logger.log("The balances of the all tokens for the ".concat(e," address has been received")),n}async getTezosTokenBalances(e,t){var r,n,s,o;let a,i,c;let{nativeToken:l,nonNativeTezosTokens:d}=this.splitTokensToNativeAndNonNativeTokens(t);return null===(r=(n=eB.lazyLogger).log)||void 0===r||r.call(n,"Getting balances of the ".concat(ea(t)," tokens for the ").concat(e," address")),l&&d.length>1?[i,c]=await Promise.all([this.getNativeTezosTokenAccountBalance(e,!0),this.getNonNativeTezosTokenBalances(e,d)]):l?i=await this.getNativeTezosTokenAccountBalance(e,!0):c=await this.getNonNativeTezosTokenBalances(e,d),i&&c?(a=c).tokenBalances.unshift(i.tokenBalances[0]):a=i||c,null===(s=(o=eB.lazyLogger).log)||void 0===s||s.call(o,"The balances of the ".concat(ea(t)," tokens for the ").concat(e," address has been received")),a}async getNonNativeTezosTokenBalance(e,t){let r=decodeURIComponent(this.getNonNativeTezosTokenBalancesQueryParams(e,t).toString()),n=await this.fetch("/v1/tokens/balances?".concat(r),"json");eB.logger.debug("Mapping the tokenBalanceDTOs to AccountTokenBalances...");let s=eJ(n);return eB.logger.debug("Mapping has been completed."),s||{address:e,token:t,balance:0n}}async getNonNativeTezosTokenBalances(t,r,n,s){let o=this.getNonNativeTezosTokenBalancesQueryParams(t,r);n&&n>0&&o.append("offset",n.toString()),s&&s>0&&s<e.defaultLoadDataLimit&&o.append("limit",s.toString());let a=decodeURIComponent(o.toString()),i=await this.fetch("/v1/tokens/balances?".concat(a),"json");eB.logger.debug("Mapping the tokenBalanceDTOs to AccountTokenBalances...");let c=eK(i);return eB.logger.debug("Mapping has been completed."),c||{address:t,tokenBalances:[]}}async getNativeTezosTokenAccountBalance(e,t){let r=await this.fetch("/v1/accounts/".concat(e,"/balance"),"text"),n={type:"native"},s=BigInt(r);return t?{address:e,tokenBalances:[{token:n,balance:s}]}:{address:e,token:n,balance:s}}getNonNativeTezosTokenBalancesQueryParams(e,t){if(!t)return new URLSearchParams({account:e});let r=y.isReadonlyArray(t)?1===t.length?t[0]:void 0:t;if(r)return new URLSearchParams({account:e,"token.contract":r.address,"token.tokenId":r.tokenId||"0"});let n=new Set,s=new Set;for(let e of t)n.add(e.address),s.add(e.tokenId||"0");let o=[...n].join(","),a=[...s].join(",");return new URLSearchParams({account:e,"token.contract.in":o,"token.tokenId.in":a})}splitTokensToNativeAndNonNativeTokens(e){let t;let r=[];for(let n of e)"native"===n.type?t=n:r.push(n);return{nativeToken:t,nonNativeTezosTokens:r}}};g(eX,"defaultLoadDataLimit",1e4);var e$=class extends k{constructor(e){super("Etherlink Node won't be able to receive a balance of the ".concat(N.toDisplayString(e),") token. Only native Etherlink token."))}},eY=class e extends k{static getMessage(e){return"RPC Error [Code: ".concat(e.code,"]. ").concat(e.message)}constructor(t){super(e.getMessage(t))}},e0=class extends er{async getBalance(e,t){if("native"!==t.type){let e=new e$(t);throw eB.logger.error(e),e}return this.getNativeEtherlinkTokenBalance(e,!1)}async getBalances(e,t){if(y.isReadonlyArray(t)&&t.length&&"native"!==t[0].type){let e=new e$(t[0]);throw eB.logger.error(e),e}return this.getNativeEtherlinkTokenBalance(e,!0)}async getNativeEtherlinkTokenBalance(e,t){eB.logger.log("Getting the Etherlink native token balance for the ".concat(e," address"));let r=await this.fetch("","json",{method:"POST",body:JSON.stringify({method:"eth_getBalance",params:[e,"latest"],id:1,jsonrpc:"2.0"})});this.ensureNoRPCErrors(r),eB.logger.log("The Etherlink native token balance for the  ".concat(e," address has been received"));let n={type:"native"},s=BigInt(r.result),o=t?{address:e,tokenBalances:[{token:n,balance:s}]}:{address:e,token:n,balance:s};return eB.logger.log("The Etherlink native token balance for the ".concat(e," address is ").concat(s)),o}ensureNoRPCErrors(e){if(!e.error)return;let t=new eY(e.error);throw eB.logger.error(eo(t)),t}},e1="\nbalance\nholder\ntoken\n",e2=class e{getTokenTransferQuery(e,t,r){return this.getOperationTokenTransfersQueryOrSubscription(!0,e,t,r)}getTokenTransferSubscription(e,t,r){return this.getOperationTokenTransfersQueryOrSubscription(!1,e,t,r)}getOperationTokenTransfersQuery(e){return this.getOperationTokenTransfersQueryOrSubscription(!0,e)}getOperationTokenTransfersSubscription(e){return this.getOperationTokenTransfersQueryOrSubscription(!1,e)}getTokenTransfersQuery(e,t,r){return this.getTokenTransfersQueryOrSteamSubscription(e,"query","bridge_operation","order_by: { created_at: desc }, offset: ".concat(t,", limit: ").concat(r))}getTokenTransfersStreamSubscription(e,t){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.defaultStreamSubscriptionBatchSize;return this.getTokenTransfersQueryOrSteamSubscription(e,"subscription","bridge_operation_stream","batch_size: ".concat(r,', cursor: {initial_value: {updated_at: "').concat(t.toISOString(),'"}, ordering: ASC}'))}getAllTokenBalancesQuery(e,t,r){let n='where: {\n      holder: { _eq: "'.concat(this.prepareEtherlinkHexValue(e,!0),'" }\n    }');return"query TokenBalance {\n      l2_token_holder(".concat(n,", offset: ").concat(t,", limit: ").concat(r,") {\n        ").concat(e1,"\n      }\n    }")}getTokenBalancesQuery(e,t){let r='where: {\n      holder: { _eq: "'.concat(this.prepareEtherlinkHexValue(e,!0),'" },\n      token: { _in: ').concat(this.arrayToInOperatorValue(t.map(e=>this.prepareEtherlinkHexValue(e,!0)))," }\n    }");return"query TokenBalance {\n      l2_token_holder(".concat(r,") {\n        ").concat(e1,"\n      }\n    }")}getTokenBalanceQuery(e,t){let r='where: {\n      holder: { _eq: "'.concat(this.prepareEtherlinkHexValue(e,!0),'" },\n      token: { _eq: "').concat(this.prepareEtherlinkHexValue(t,!0),'" }\n    }');return"query TokenBalance {\n      l2_token_holder(".concat(r,") {\n        ").concat(e1,"\n      }\n    }")}getOperationTokenTransfersQueryOrSubscription(e,t,r,n){let s;if(this.isEtherlinkTransaction(t)){t=this.prepareEtherlinkHexValue(t,!1);let e='l2_transaction: {\n        transaction_hash: { _eq: "'.concat(t,'" }\n        ').concat("number"==typeof r?"log_index: { _eq: ".concat(r," }"):"","\n      }");s="where: {\n        _or : [\n          { withdrawal: { ".concat(e," } }\n          { deposit: { ").concat(e," } }\n        ]\n      }")}else{let e='l1_transaction: {\n        operation_hash: { _eq: "'.concat(t,'" }\n        ').concat("number"==typeof r?"counter: { _eq: ".concat(r," }"):"","\n        ").concat("number"==typeof n?"nonce: { _eq: ".concat(n," }"):"","\n      }");s="where: {\n        _or : [\n          { deposit: { ".concat(e," } }\n          { withdrawal: { ").concat(e," } }\n        ]\n      }")}return"".concat(e?"query":"subscription"," TokenTransfer {\n      bridge_operation(").concat(s,") {\n        ").concat(this.queryParts.getBridgeOperationsFields(this.queryParts.bridgeDepositFields,this.queryParts.bridgeWithdrawalFields),"\n      }\n    }")}getTokenTransfersQueryOrSteamSubscription(e,t,r,n){let s="";if(e){if("string"==typeof e||1===e.length){let t="string"==typeof e?e:e[0];s=this.getTokenTransfersWhereArgumentForOneAddress(t)}else e.length>1&&(s=this.getTokenTransfersWhereArgumentForMultipleAddresses(e))}return s&&(s+=","),"".concat(t," TokenTransfers {\n      ").concat(r,"(\n        ").concat(s,"\n        ").concat(n,"\n      ) {\n        ").concat(this.queryParts.getBridgeOperationsFields(this.queryParts.bridgeDepositFields,this.queryParts.bridgeWithdrawalFields),"\n      }\n    }")}getTokenTransfersWhereArgumentForOneAddress(e){let t;let r=e;return this.isEtherlinkAddress(e)?(r=this.prepareEtherlinkHexValue(e,!1),t="l2_account"):t="l1_account","where: {\n      _or: [\n    	  { deposit: { l1_transaction: { ".concat(t,': { _eq: "').concat(r,'" } } } }\n        { withdrawal: { l2_transaction: { ').concat(t,': { _eq: "').concat(r,'" } } } } \n      ]\n    }')}getTokenTransfersWhereArgumentForMultipleAddresses(e){let{tezosAddresses:t,etherlinkAddresses:r}=this.splitAddressesToTezosAndEtherlinkAddresses(e),n=t.length>0&&r.length>0,s="";return n&&(s+="{ _or: [ "),1===t.length?s+='{ l1_account: { _eq: "'.concat(t[0],'" } }'):t.length>1&&(s+="{ l1_account: { _in: ".concat(this.arrayToInOperatorValue(t)," } }")),1===r.length?s+='{ l2_account: { _eq: "'.concat(this.prepareEtherlinkHexValue(r[0],!1),'" } }'):r.length>1&&(s+="{ l2_account: { _in: ".concat(this.arrayToInOperatorValue(r.map(e=>this.prepareEtherlinkHexValue(e,!1)))," } }")),n&&(s+=" ] }"),"where: { _or: [\n      {\n        deposit: { \n          l1_transaction: ".concat(s,"\n        }  \n      }\n      {\n        withdrawal: {\n          l2_transaction: ").concat(s,"\n        }\n      }\n    ] }")}splitAddressesToTezosAndEtherlinkAddresses(e){let t=[],r=[];for(let n of e)this.isEtherlinkAddress(n)?r.push(n):t.push(n);return{tezosAddresses:t,etherlinkAddresses:r}}isEtherlinkTransaction(e){return 66===e.length&&e.startsWith("0x")}isEtherlinkAddress(e){return e.startsWith("0x")}prepareEtherlinkHexValue(e,t){return I.prepareHexPrefix(e,t).toLowerCase()}arrayToInOperatorValue(e){return e.reduce((t,r,n)=>{let s=t+'"'.concat(r,'"');return n<e.length-1&&(s+=","),s},"[")+"]"}constructor(t=e.defaultQueryParts,r=10){this.queryParts=t,this.defaultStreamSubscriptionBatchSize=r}};g(e2,"defaultQueryParts",{getBridgeOperationsFields:(e,t)=>"\ntype\nis_completed\nis_successful\ncreated_at\nupdated_at\n".concat(e?"deposit { ".concat(e," }"):"","\n").concat(t?"withdrawal { ".concat(t," }"):"","\n"),bridgeDepositFields:"\nl1_transaction {\n  level\n  operation_hash\n  counter\n  nonce\n  amount\n  ticket {\n    token {\n      type\n      contract_address\n      token_id\n    }\n  }\n  l1_account\n  l2_account\n  timestamp\n  inbox_message {\n    type\n    level\n    index\n  }\n}\nl2_transaction {\n  level\n  transaction_hash\n  log_index\n  amount\n  l2_token {\n    id\n  }\n  timestamp\n}",bridgeWithdrawalFields:"\nl1_transaction {\n  level\n  operation_hash\n  counter\n  nonce\n  timestamp\n}\nl2_transaction {\n  level\n  transaction_hash\n  log_index\n  amount\n  l2_token {\n    id\n    ticket {\n      token {\n        type\n        contract_address\n        token_id\n      }\n    }\n  }\n  l1_account\n  l2_account\n  timestamp\n  outbox_message {\n    level\n    index\n    commitment {\n      hash\n    }\n    proof\n    cemented_at\n  }\n}",l2TokenHolderFields:e1});var e3=class extends k{constructor(){super("AutoUpdate is disabled for the DipDupBridgeDataProvider")}},e4=class e extends k{static getMessage(e){return e.reduce((e,t,r)=>"".concat(e,"\n  ").concat(r+1,". ").concat(t.message,";"),"DipDup GraphQL Errors:")}constructor(t){super(e.getMessage(t))}},e6=class extends k{constructor(e){super("DipDup won't be able to receive a balance of the ".concat(N.toDisplayString(e),") token. Only ERC-20 tokens."))}},e5=class extends k{constructor(e){super("The token transfer Id is invalid: ".concat(e))}},e8=e=>{switch(null==e?void 0:e.type.toLowerCase()){case"fa1.2":return{type:"fa1.2",address:e.contract_address};case"fa2":return{type:"fa2",address:e.contract_address,tokenId:e.token_id};default:return{type:"native"}}},e9=e=>e&&"xtz"!==e?{type:"erc20",address:I.toChecksumAddress(e)}:{type:"native"},e7=(e,t)=>{try{var r;let n=e.l1_transaction.l1_account,s=I.toChecksumAddress(e.l1_transaction.l2_account),o={blockId:e.l1_transaction.level,hash:e.l1_transaction.operation_hash,counter:e.l1_transaction.counter,nonce:e.l1_transaction.nonce,amount:BigInt(e.l1_transaction.amount),token:e8(e.l1_transaction.ticket.token),timestamp:e.l1_transaction.timestamp},a=e.l2_transaction?{blockId:e.l2_transaction.level,hash:I.prepareHexPrefix(e.l2_transaction.transaction_hash,!0),logIndex:e.l2_transaction.log_index,amount:BigInt(e.l2_transaction.amount),token:e9(null===(r=e.l2_transaction.l2_token)||void 0===r?void 0:r.id),timestamp:e.l2_transaction.timestamp}:void 0,i=U.convertOperationDataToTokenTransferId(o.hash,o.counter,o.nonce);return t?{id:i,kind:0,status:400,source:n,receiver:s,tezosOperation:o,etherlinkOperation:a}:a?{id:i,kind:0,status:300,source:n,receiver:s,tezosOperation:o,etherlinkOperation:a}:{id:i,kind:0,status:100,source:n,receiver:s,tezosOperation:o}}catch(e){return eB.logger.error("Deposit DTO mapping error.",eo(e)),null}},te=(e,t)=>{try{var r,n,s,o;let a=I.toChecksumAddress(e.l2_transaction.l2_account),i=e.l2_transaction.l1_account,c=BigInt(e.l2_transaction.amount),l={blockId:e.l2_transaction.level,hash:I.prepareHexPrefix(e.l2_transaction.transaction_hash,!0),logIndex:e.l2_transaction.log_index,amount:c,token:e9(null===(r=e.l2_transaction.l2_token)||void 0===r?void 0:r.id),timestamp:e.l2_transaction.timestamp},d=e.l1_transaction?{blockId:e.l1_transaction.level,hash:e.l1_transaction.operation_hash,counter:e.l1_transaction.counter,nonce:e.l1_transaction.nonce,amount:c,token:e8(null===(s=e.l2_transaction.l2_token)||void 0===s?void 0:null===(n=s.ticket)||void 0===n?void 0:n.token),timestamp:e.l1_transaction.timestamp}:void 0,u={outboxMessageLevel:e.l2_transaction.outbox_message.level,outboxMessageIndex:e.l2_transaction.outbox_message.index,commitment:(null===(o=e.l2_transaction.outbox_message.commitment)||void 0===o?void 0:o.hash)||"",proof:e.l2_transaction.outbox_message.proof||""},h=U.convertOperationDataToTokenTransferId(l.hash,l.logIndex);return t?{id:h,kind:1,status:400,source:a,receiver:i,tezosOperation:d,etherlinkOperation:l,rollupData:u}:d?{id:h,kind:1,status:300,source:a,receiver:i,tezosOperation:d,etherlinkOperation:l,rollupData:u}:u.commitment&&u.proof?{id:h,kind:1,status:200,source:a,receiver:i,etherlinkOperation:l,rollupData:u}:{id:h,kind:1,status:100,source:a,receiver:i,etherlinkOperation:l,rollupData:{outboxMessageLevel:e.l2_transaction.outbox_message.level,outboxMessageIndex:e.l2_transaction.outbox_message.index,estimatedOutboxMessageExecutionTimestamp:e.l2_transaction.outbox_message.cemented_at||void 0}}}catch(e){return eB.logger.error("Withdrawal DTO mapping error.",eo(e)),null}},tt=e=>{let t=e.is_completed&&!e.is_successful;return"deposit"===e.type?e7(e.deposit,t):te(e.withdrawal,t)},tr=e=>{let t=[];for(let r of(eB.logger.debug("Mapping the bridge_operation DTOs to BridgeTokenTransfer..."),e.bridge_operation||e.bridge_operation_stream)){let e=tt(r);e&&t.push(e)}return eB.logger.debug("Mapping has been completed."),t},tn=e=>{try{let t=e.l2_token_holder[0];return t?{address:I.toChecksumAddress(t.holder),balance:BigInt(t.balance),token:e9(t.token)}:null}catch(e){return eB.logger.error("Token Balances DTO mapping error.",eo(e)),null}},ts=(e,t)=>{try{var r;let n=null===(r=e.l2_token_holder[0])||void 0===r?void 0:r.holder;return{address:(n?I.toChecksumAddress(n):t)||"",tokenBalances:e.l2_token_holder.map(e=>({balance:BigInt(e.balance),token:e9(e.token)}))}}catch(e){return eB.logger.error("Token Balances DTO mapping error.",eo(e)),{address:t||"",tokenBalances:[]}}},to=class e{get readyState(){return this.socket.readyState}get socket(){if(!this._socket)throw Error("Internal websocket is not created. Use the connect method first");return this._socket}async connect(){return this.disconnect(),new Promise((t,r)=>{this._socket=new WebSocket(this.url,e.webSocketProtocol);let n=()=>{this.socket.removeEventListener("open",n),t()},s=e=>{this.socket.removeEventListener("error",s),r(e)};this.socket.addEventListener("open",n),this.socket.addEventListener("error",s),this.socket.addEventListener("message",this.onMessageReceived),this.socket.addEventListener("error",this.onError),this.socket.addEventListener("close",this.onClosed)})}disconnect(){this._socket&&(this.socket.removeEventListener("message",this.onMessageReceived),this.socket.removeEventListener("error",this.onError),this.socket.removeEventListener("close",this.onClosed),this.socket.close())}send(e){this.socket.send(JSON.stringify(e))}constructor(e){this.url=e,g(this,"events",{messageReceived:new en,closed:new en}),g(this,"_socket"),g(this,"onMessageReceived",e=>{try{let t=JSON.parse(e.data);this.events.messageReceived.emit(t)}catch(e){console.error(e)}}),g(this,"onError",e=>{throw Error("Websocket received error: ".concat(JSON.stringify(e)))}),g(this,"onClosed",e=>{this.events.closed.emit(this,e)})}};g(to,"webSocketProtocol","graphql-ws");var ta=class{get isStarted(){return this._isStarted}get isSocketOpen(){return 1===this.socket.readyState}async start(){if(!this.isStarted&&!this._isStarting){this._isStarting=!0;try{this.socket.events.messageReceived.addListener(this.onSocketMessageReceived),this.socket.events.closed.addListener(this.onSocketClosed),await this.connect(),this._isStarted=!0}catch(e){throw this._isStarting=!1,this._isStarted=!1,Error("Socket error",{cause:e})}}}stop(){(this.isStarted||this._isStarting)&&(this.socket.events.messageReceived.removeListener(this.onSocketMessageReceived),this.socket.events.closed.removeListener(this.onSocketClosed),this.disconnect(),this.reconnectScheduler[Symbol.dispose](),this._isStarted=!1,this._isStarting=!1)}subscribe(e){let t=this.subscriptions.get(e);return t?(t.subscribersCount++,!1):(t={id:this.subscriptionIdCounter++,query:e,subscribersCount:1},this.subscribeToSubscription(t),this.subscriptions.set(t.query,t),!0)}unsubscribe(e){let t=this.subscriptions.get(e);return!(!t||--t.subscribersCount>0)&&(this.unsubscribeFromSubscription(t.id),this.subscriptions.delete(t.query),!0)}unsubscribeFromAllSubscriptions(){if(!this.subscriptions.size)return!1;for(let e of this.subscriptions.values())this.unsubscribeFromSubscription(e.id);return this.subscriptions.clear(),!0}async connect(){await this.socket.connect(),this.socket.send({type:"connection_init",payload:{headers:{"content-type":"application/json"},lazy:!0}}),this.subscribeToAllSubscriptions()}subscribeToAllSubscriptions(){if(this.isSocketOpen)for(let e of this.subscriptions.values())this.subscribeToSubscription(e)}subscribeToSubscription(e){if(!this.isSocketOpen)return;let t={type:"start",id:e.id.toString(),payload:{query:e.query}};this.socket.send(t)}unsubscribeFromSubscription(e){if(!this.isSocketOpen)return;let t={type:"stop",id:e.toString()};this.socket.send(t)}disconnect(){this.socket.disconnect(),this.subscriptions.clear()}constructor(e){this.webSocketApiBaseUrl=e,g(this,"events",{messageReceived:new en}),g(this,"socket"),g(this,"subscriptions",new Map),g(this,"subscriptionIdCounter",0),g(this,"reconnectScheduler",new es([1e3,5e3,3e4,6e4],12e4)),g(this,"_isStarted",!1),g(this,"_isStarting",!1),g(this,"onSocketClosed",(e,t)=>{eB.logger.warn("DipDup socket is closed. Reason:",t.reason),this.reconnectScheduler.setTimeout(()=>{eB.logger.log("DipDup socket reconnection..."),this.connect()})}),g(this,"onSocketMessageReceived",e=>{switch(e.type){case"ka":case"connection_ack":break;default:this.events.messageReceived.emit(e)}}),this.socket=new to(new URL(B.trimSlashes(this.webSocketApiBaseUrl)+"/v1/graphql"))}},ti=class e extends er{get dipDupWebSocketClient(){if(this._dipDupWebSocketClient)return this._dipDupWebSocketClient;let e=new e3;throw eB.logger.error(eo(e)),e}async getTokenTransfer(e){var t,r,n,s;eB.logger.log("Getting token transfer by the token transfer Id:",e);let o=U.convertTokenTransferIdToOperationData(e);if(!o)throw new e5(e);let a=await this.fetch("/v1/graphql","json",{method:"POST",body:JSON.stringify({query:this.dipDupGraphQLQueryBuilder.getTokenTransferQuery(o[0],o[1],o[2])})});this.ensureNoDipDupGraphQLErrors(a),eB.logger.log("Token transfer has been received by the token transfer Id:",e);let i=tr(a.data)[0];return null===(t=(r=eB.lazyLogger).log)||void 0===t||t.call(r,el(i)),null===(n=(s=eB.lazyLogger).debug)||void 0===n||n.call(s,ed(i)),i||null}async getTokenTransfers(e){return this.getTokenTransfersInternal(void 0,e)}async getAccountTokenTransfers(e,t){return this.getTokenTransfersInternal(e,t)}async getOperationTokenTransfers(e){let t="string"==typeof e?e:0===e.kind?e.tezosOperation.hash:e.etherlinkOperation.hash;eB.logger.log("Getting token transfer by the operation hash:",t);let r=await this.fetch("/v1/graphql","json",{method:"POST",body:JSON.stringify({query:this.dipDupGraphQLQueryBuilder.getOperationTokenTransfersQuery(t)})});return this.ensureNoDipDupGraphQLErrors(r),eB.logger.log("Token transfer (".concat(r.data.bridge_operation.length,") has been received by the operation hash:"),t),tr(r.data)}subscribeToTokenTransfer(e){this.startDipDupWebSocketClientIfNeeded(),eB.logger.log("Subscribe to the token transfer by the token transfer Id:",e);let t=U.convertTokenTransferIdToOperationData(e);if(!t)throw new e5(e);let r=this.dipDupGraphQLQueryBuilder.getTokenTransferSubscription(t[0],t[1],t[2]);this.dipDupWebSocketClient.subscribe(r)}unsubscribeFromTokenTransfer(e){eB.logger.log("Unsubscribe from the token transfer by the token transfer Id:",e);let t=U.convertTokenTransferIdToOperationData(e);if(!t)throw new e5(e);let r=this.dipDupGraphQLQueryBuilder.getTokenTransferSubscription(t[0],t[1],t[2]);this.dipDupWebSocketClient.unsubscribe(r)}subscribeToTokenTransfers(){this.startDipDupWebSocketClientIfNeeded(),this.subscribeToTokenTransfersInternal(null)}unsubscribeFromTokenTransfers(){this.unsubscribeFromTokenTransfersInternal(null)}subscribeToAccountTokenTransfers(e){this.startDipDupWebSocketClientIfNeeded(),this.subscribeToTokenTransfersInternal(e)}unsubscribeFromAccountTokenTransfers(e){this.unsubscribeFromTokenTransfersInternal(e)}subscribeToOperationTokenTransfers(e){this.startDipDupWebSocketClientIfNeeded();let t="string"==typeof e?e:U.getInitialOperation(e).hash;eB.logger.log("Subscribe to the token transfers by the initial operation:",t);let r=this.dipDupGraphQLQueryBuilder.getOperationTokenTransfersSubscription(t);this.dipDupWebSocketClient.subscribe(r)}unsubscribeFromOperationTokenTransfers(e){let t="string"==typeof e?e:U.getInitialOperation(e).hash;eB.logger.log("Unsubscribe from the token transfers by the initial operation:",t);let r=this.dipDupGraphQLQueryBuilder.getOperationTokenTransfersSubscription(t);this.dipDupWebSocketClient.unsubscribe(r)}unsubscribeFromAllSubscriptions(){this.dipDupWebSocketClient.unsubscribeFromAllSubscriptions(),this.subscribedAddresses.clear(),this.currentTokenTransfersSubscription=void 0}async getBalance(e,t){var r,n,s,o,a,i;if("erc20"!==t.type){let e=new e6(t);throw eB.logger.error(e),e}null===(r=(n=eB.lazyLogger).log)||void 0===r||r.call(n,"Getting balance of the ".concat(ea(t)," token for the ").concat(e," address"));let c=await this.fetch("/v1/graphql","json",{method:"POST",body:JSON.stringify({query:this.dipDupGraphQLQueryBuilder.getTokenBalanceQuery(e,t.address)})});this.ensureNoDipDupGraphQLErrors(c),null===(s=(o=eB.lazyLogger).log)||void 0===s||s.call(o,"The balance of the ".concat(ea(t)," token for the ").concat(e," address has been received")),eB.logger.debug("Mapping the tokenBalancesDTO to AccountTokenBalances...");let l=tn(c.data);return eB.logger.debug("Mapping has been completed."),null===(a=(i=eB.lazyLogger).log)||void 0===a||a.call(i,"The balance of the ".concat(ea(t)," token for the ").concat(e," address is ").concat(null==l?void 0:l.balance)),l||{address:e,token:t,balance:0n}}async getBalances(e,t){var r,n,s,o;let a;let i=!y.isReadonlyArray(t);if(i)a=this.dipDupGraphQLQueryBuilder.getAllTokenBalancesQuery(e,this.getPreparedOffsetParameter(t),this.getPreparedLimitParameter(t));else{let r=t.map(e=>e.address);a=this.dipDupGraphQLQueryBuilder.getTokenBalancesQuery(e,r)}null===(r=(n=eB.lazyLogger).log)||void 0===r||r.call(n,"Getting balances of the ".concat(i?"all":ea(t)," tokens for the ").concat(e," address"));let c=await this.fetch("/v1/graphql","json",{method:"POST",body:JSON.stringify({query:a})});this.ensureNoDipDupGraphQLErrors(c),null===(s=(o=eB.lazyLogger).log)||void 0===s||s.call(o,"The balances of the ".concat(i?"all":ea(t)," tokens for the ").concat(e," address has been received")),eB.logger.debug("Mapping the tokenBalancesDTO to AccountTokenBalances...");let l=ts(c.data,e);return eB.logger.debug("Mapping has been completed."),l}[Symbol.dispose](){var e;null===(e=this._dipDupWebSocketClient)||void 0===e||e.events.messageReceived.removeListener(this.onSocketMessageReceived),this.stopDipDupWebSocketClient()}startDipDupWebSocketClientIfNeeded(){this._dipDupWebSocketClient&&this._dipDupWebSocketClient.start().catch(e=>eB.logger.error("DipDup Web Socket has not bee started. Error = ".concat(eo(e))))}stopDipDupWebSocketClient(){var e;null===(e=this._dipDupWebSocketClient)||void 0===e||e.stop()}async getTokenTransfersInternal(e,t){var r,n,s,o;let a=this.getPreparedOffsetParameter(t),i=this.getPreparedLimitParameter(t);null===(r=(n=eB.lazyLogger).log)||void 0===r||r.call(n,e?"Getting token transfers for ".concat("string"==typeof e?"".concat(e," address."):"[".concat(e.join(", "),"] addresses.")):"Getting all token transfers.","Offset == ".concat(a,"; Limit == ").concat(i));let c=await this.fetch("/v1/graphql","json",{method:"POST",body:JSON.stringify({query:this.dipDupGraphQLQueryBuilder.getTokenTransfersQuery(e,a,i)})});return this.ensureNoDipDupGraphQLErrors(c),null===(s=(o=eB.lazyLogger).log)||void 0===s||s.call(o,e?"Token transfers have been received for ".concat("string"==typeof e?"".concat(e," address."):"[".concat(e.join(", "),"] addresses.")):"Token transfers have been received.","Offset == ".concat(a,"; Limit == ").concat(i,"."),"Bridge Operations Count == ".concat(c.data.bridge_operation.length)),tr(c.data)}subscribeToTokenTransfersInternal(e){var t,r,n,s;null===(t=(r=eB.lazyLogger).log)||void 0===t||t.call(r,e?"Subscribe to token transfers of the ".concat("string"==typeof e?"".concat(e," address."):"[".concat(e.join(", "),"] addresses.")):"Subscribe to all token transfers.");let[o,a]=this.updateSubscribedAddresses(e,!0);if(a===o||this.subscribedAddresses.has(null)&&e){null===(n=(s=eB.lazyLogger).log)||void 0===n||n.call(s,a===o?(e?"The token transfers of the requested ".concat("string"==typeof e?"".concat(e," address has"):"[".concat(e.join(", "),"] addresses have")," already been subscribed."):"Already subscribed to all token transfers.")+" Skip the new subscription":"Subscription to all token transfers is active. There's no need to subscribe to token transfers of the ".concat("string"==typeof e?"".concat(e," address."):"[".concat(e.join(", "),"] addresses.")));return}this.resubscribeToTokenTransfers()}unsubscribeFromTokenTransfersInternal(e){var t,r,n,s;null===(t=(r=eB.lazyLogger).log)||void 0===t||t.call(r,e?"Unsubscribe from token transfers of the ".concat("string"==typeof e?"".concat(e," address."):"[".concat(e.join(", "),"] addresses.")):"Unsubscribe from all token transfers.");let[o,a]=this.updateSubscribedAddresses(e,!1);if(a===o||this.subscribedAddresses.has(null)&&e){null===(n=(s=eB.lazyLogger).log)||void 0===n||n.call(s,a===o?(e?"The token transfers of the requested ".concat("string"==typeof e?"".concat(e," address has"):"[".concat(e.join(", "),"] addresses have")," already been unsubscribed."):"Already unsubscribed from all token transfers.")+" No additional action is required.":"Subscription to all token transfers is active. There's no need to unsubscribe from token transfers of the ".concat("string"==typeof e?"".concat(e," address."):"[".concat(e.join(", "),"] addresses.")));return}this.resubscribeToTokenTransfers()}createDipDupGraphQLQueryBuilder(){return new e2}ensureNoDipDupGraphQLErrors(e){if(!e.errors||!e.errors.length)return;let t=new e4(e.errors);throw eB.logger.error(eo(t)),t}resubscribeToTokenTransfers(){let e;this.subscribedAddresses.size&&(eB.logger.debug("Resubscribe to the token transfers subscription"),e=this.dipDupGraphQLQueryBuilder.getTokenTransfersStreamSubscription(this.subscribedAddresses.has(null)?null:[...this.subscribedAddresses],new Date),this.dipDupWebSocketClient.subscribe(e)),this.currentTokenTransfersSubscription&&(eB.logger.debug("Unsubscribe from the previous token transfers subscription"),this.dipDupWebSocketClient.unsubscribe(this.currentTokenTransfersSubscription)),this.currentTokenTransfersSubscription=e}updateSubscribedAddresses(e,t){let r=this.subscribedAddresses.size,n=t?"add":"delete";if(eB.logger.debug("Current count of the subscribed addresses (include all [null]): ",r),e){if("string"==typeof e)this.subscribedAddresses[n](e);else for(let t of e)this.subscribedAddresses[n](t)}else this.subscribedAddresses[n](null);let s=this.subscribedAddresses.size;return eB.logger.debug("Updated count of the subscribed addresses (include all [null]): ",s),[r,s]}getPreparedOffsetParameter(e){let t="number"==typeof e?e:null==e?void 0:e.offset;return t&&t>0?t:0}getPreparedLimitParameter(t){let r="number"==typeof t?t:null==t?void 0:t.offset;return r&&r>0?r:e.defaultLoadDataLimit}isBridgeOperationCreated(e){return!e.is_completed&&new Date(e.updated_at).valueOf()-new Date(e.created_at).valueOf()<=3e3}constructor(e){super(e.baseUrl),g(this,"events",{tokenTransferCreated:new en,tokenTransferUpdated:new en}),g(this,"dipDupGraphQLQueryBuilder"),g(this,"_dipDupWebSocketClient"),g(this,"subscribedAddresses",new Set),g(this,"currentTokenTransfersSubscription"),g(this,"onSocketMessageReceived",e=>{try{if("data"!==e.type||!e.payload.data)return;eB.logger.debug("DipDup data message was received.","Message Id == ".concat(e.id));let i=e.payload.data,c=i&&(i.bridge_operation||i.bridge_operation_stream);if(!(null==c?void 0:c.length))return;for(let e of(eB.logger.log("bridge_operation updated was received. Count of updated records:",c.length),c)){var t,r,n,s,o,a;let i=this.isBridgeOperationCreated(e),c=tt(e);c&&(null===(t=(r=eB.lazyLogger).log)||void 0===t||t.call(r,"The ".concat(ei(c)," token transfer has been ").concat(i?"created":"updated",".")),null===(n=(s=eB.lazyLogger).log)||void 0===n||n.call(s,el(c)),null===(o=(a=eB.lazyLogger).debug)||void 0===o||o.call(a,ed(c)),this.events[i?"tokenTransferCreated":"tokenTransferUpdated"].emit(c))}}catch(e){eB.logger.error("Unknown error in the socket message handler.",eo(e))}}),this.dipDupGraphQLQueryBuilder=this.createDipDupGraphQLQueryBuilder(),e.autoUpdate&&"websocket"===e.autoUpdate.type?(this._dipDupWebSocketClient=new ta(e.autoUpdate.webSocketApiBaseUrl),this._dipDupWebSocketClient.events.messageReceived.addListener(this.onSocketMessageReceived),e.autoUpdate.startImmediately&&this.startDipDupWebSocketClientIfNeeded()):this._dipDupWebSocketClient=null}};g(ti,"defaultLoadDataLimit",100);var tc=[{type:"native"}],tl=class{get events(){return this.dipDupBridgeDataProvider.events}async getTokenTransfer(e){return this.dipDupBridgeDataProvider.getTokenTransfer(e)}async getTokenTransfers(e){return this.dipDupBridgeDataProvider.getTokenTransfers(e)}async getAccountTokenTransfers(e,t){return this.dipDupBridgeDataProvider.getAccountTokenTransfers(e,t)}async getOperationTokenTransfers(e){return this.dipDupBridgeDataProvider.getOperationTokenTransfers(e)}subscribeToTokenTransfer(e){return this.dipDupBridgeDataProvider.subscribeToTokenTransfer(e)}unsubscribeFromTokenTransfer(e){return this.dipDupBridgeDataProvider.unsubscribeFromTokenTransfer(e)}subscribeToTokenTransfers(){return this.dipDupBridgeDataProvider.subscribeToTokenTransfers()}unsubscribeFromTokenTransfers(){return this.dipDupBridgeDataProvider.unsubscribeFromTokenTransfers()}subscribeToAccountTokenTransfers(e){return this.dipDupBridgeDataProvider.subscribeToAccountTokenTransfers(e)}unsubscribeFromAccountTokenTransfers(e){return this.dipDupBridgeDataProvider.unsubscribeFromAccountTokenTransfers(e)}subscribeToOperationTokenTransfers(e){return this.dipDupBridgeDataProvider.subscribeToOperationTokenTransfers(e)}unsubscribeFromOperationTokenTransfers(e){return this.dipDupBridgeDataProvider.unsubscribeFromOperationTokenTransfers(e)}unsubscribeFromAllSubscriptions(){return this.dipDupBridgeDataProvider.unsubscribeFromAllSubscriptions()}async getBalances(e,t){let r=this.isEtherlinkAccount(e),n=y.isReadonlyArray(t)?this.groupTokens(t):null,s=[];if(r?n?(n.nativeTokens.length&&s.push(this.etherlinkNodeBalancesDataProvider.getBalances(e,n.nativeTokens)),n.nonNativeEtherlinkTokens.length&&s.push(this.dipDupBridgeDataProvider.getBalances(e,n.nonNativeEtherlinkTokens))):((null==t?void 0:t.offset)||s.push(this.etherlinkNodeBalancesDataProvider.getBalances(e,tc)),s.push(this.dipDupBridgeDataProvider.getBalances(e,t))):n?(n.nativeTokens.length&&s.push(this.tzKTBalancesDataProvider.getBalances(e,n.nativeTokens)),n.nonNativeTezosTokens.length&&s.push(this.tzKTBalancesDataProvider.getBalances(e,n.nonNativeTezosTokens))):s.push(this.tzKTBalancesDataProvider.getBalances(e,t)),!s.length)return{address:e,tokenBalances:[]};let o=await Promise.allSettled(s),a=[];for(let e of o)"fulfilled"===e.status&&a.push(e.value);return this.mergeAccountTokenBalances(a)}getBalance(e,t){return this.isEtherlinkAccount(e)?"native"===t.type?this.etherlinkNodeBalancesDataProvider.getBalance(e,t):this.dipDupBridgeDataProvider.getBalance(e,t):this.tzKTBalancesDataProvider.getBalance(e,t)}getRegisteredTokenPair(e){return this.bridgeDataProvider.getRegisteredTokenPair(e)}getRegisteredTokenPairs(e){return this.bridgeDataProvider.getRegisteredTokenPairs(e)}[Symbol.dispose](){this.dipDupBridgeDataProvider[Symbol.dispose]()}mergeAccountTokenBalances(e){if(!e.length)throw Error("It's not possible to merge an empty array for the AccountTokenBalances");return{address:e[0].address,tokenBalances:e.flatMap(e=>e.tokenBalances)}}isEtherlinkAccount(e){return e.startsWith("0x")}constructor(e){g(this,"bridgeDataProvider"),g(this,"dipDupBridgeDataProvider"),g(this,"tzKTBalancesDataProvider"),g(this,"etherlinkNodeBalancesDataProvider"),g(this,"groupTokens",m(e=>{let t={nativeTokens:[],nonNativeEtherlinkTokens:[],nonNativeTezosTokens:[]};for(let r of e)"native"===r.type?t.nativeTokens.push(r):"erc20"===r.type?t.nonNativeEtherlinkTokens.push(r):t.nonNativeTezosTokens.push(r);return t})),this.bridgeDataProvider=y.isReadonlyArray(e.tokenPairs)?new eH(e.tokenPairs):e.tokenPairs,this.dipDupBridgeDataProvider=new ti({baseUrl:e.dipDup.baseUrl,autoUpdate:{type:"websocket",webSocketApiBaseUrl:e.dipDup.webSocketApiBaseUrl,startImmediately:!1}}),this.tzKTBalancesDataProvider=new eX(e.tzKTApiBaseUrl),this.etherlinkNodeBalancesDataProvider=new e0(e.etherlinkRpcUrl)}}}}]);