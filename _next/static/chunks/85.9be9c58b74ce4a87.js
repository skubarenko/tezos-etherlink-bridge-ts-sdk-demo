(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[85],{35883:function(){},46601:function(){},89214:function(){},69951:function(){},52361:function(){},94616:function(){},96534:function(e,t,r){"use strict";r.r(t),r.d(t,{App:function(){return T}});var s=r(1937),i=r(54333),o=r(12573),n=r(19497),a=r(89077),l=r(73983);class h{get isMetaMask(){return this.provider.isMetaMask}getCurrentChainId(){return this.provider.request({method:"eth_chainId",params:[]})}async getCurrentConnectedAccount(){try{let e=await this.provider.request({method:"eth_accounts"});return this.getAccountToConnect(e)}catch(e){console.error(e)}}async connectWallet(){try{let e=await this.provider.request({method:"eth_requestAccounts"});return this.getAccountToConnect(e)}catch(e){if((null==e?void 0:e.code)===4001)return;console.error(e)}}async switchNetwork(){try{let e=await this.provider.request({method:"wallet_switchEthereumChain",params:[{chainId:this.chainId}]});console.log(e)}catch(t){let e=null==t?void 0:t.code;if(4001===e)return;if(4002!==e)return this.addNetwork();console.error(t)}}async addNetwork(){try{await this.provider.request({method:"wallet_addEthereumChain",params:[l.v.etherlink.network]})}catch(e){if((null==e?void 0:e.code)===4001)return;console.error(e)}}async disconnectWallet(){}getAccountToConnect(e){return e&&e[0]&&a.P6Y.toChecksumAddress(e[0])}addEventListener(e,t){this.provider.on(e,t)}removeEventListener(e,t){this.provider.removeListener(e,t)}constructor(e){this.provider=e,this.chainId=l.v.etherlink.network.chainId}}var d=r(75410);class c{async sign(e,t){let r=await this.wallet.sign(e,t),s=(0,d.sA)(r,d.O4.edsig);return{sig:r,prefixSig:r,bytes:e,sbytes:e+(0,d.Cw)(s)}}publicKey(){return this.wallet.getPK()}publicKeyHash(){return this.wallet.getPKH()}secretKey(){throw Error("Method not implemented.")}constructor(e){this.wallet=e}}class u extends i.wy{async deposit(e,t,r,s){let i=await this.getTezosConnectedAddress(),o="string"==typeof r?r:await this.getEtherlinkConnectedAddress();return{tokenTransfer:await this.options.bridgeDataProviders.transfers.deposit(e,t,i,o)}}async startWithdraw(e,t,r){let s=await this.getEtherlinkConnectedAddress(),i="string"==typeof r?r:await this.getTezosConnectedAddress();return{tokenTransfer:await this.options.bridgeDataProviders.transfers.startWithdraw(e,t,s,i)}}async finishWithdraw(e){return this.options.bridgeDataProviders.transfers.finishWithdraw(e)}constructor(e){super(e),this.options=e}}class p{entries(){return this.store.entries}values(){return this.store.values()}keys(){return this.store.keys()}get(e){return this.store.get(e)}save(e){this.store.set(this.keyGetter(e),e),this.saveStore()}find(e){for(let[t,r]of this.store)if(e(r,t))return[t,r]}loadStore(){let e=new Map,t=localStorage.getItem(this.storeName+".data");if(t)try{let r=JSON.parse(t,this.deserializer);if(Array.isArray(r))for(let t of r)e.set(this.keyGetter(t),t)}catch(e){console.warn(e)}return e}saveStore(){let e=[];for(let t of this.store.values()){let r=JSON.stringify(t,this.serializer);e.push(r)}try{let t=JSON.stringify(e);localStorage.setItem(this.storeName+".data",t)}catch(e){}}constructor(e,t,r,s,i){this.storeName=e,this.keyGetter=t,this.deserializer=r,this.serializer=s,this.store=i||this.loadStore()}}var k=r(93349);let g=["tezosOperation","etherlinkOperation"],f=["amount","fee"];class w{async getTokenTransfer(e){let t="string"==typeof e?e:i.P6.getInitialOperationHash(e);return await (0,k.Dc)(1e3),this.tokenTransfersStore.get(t)||null}async getTokenTransfers(e,t,r){let s,o,n;void 0!==e&&("number"==typeof e?(o=e,n=t):(s=e,o=t,n=r)),o=o&&o>0?o:0,n=n&&n>0?n:this.defaultLoadDataLimit;let a=[];for(let e of this.tokenTransfersStore.values())(!s||("string"==typeof s?i.P6.isBridgeTokenTransferOwner(e,s):s.some(t=>i.P6.isBridgeTokenTransferOwner(e,t))))&&a.push(e);return a.sort((e,t)=>{let r=i.P6.getInitialOperation(e);return i.P6.getInitialOperation(t).timestamp.localeCompare(r.timestamp)}),a.slice(o,o+n),a}subscribeToTokenTransfer(e){}unsubscribeFromTokenTransfer(e){}subscribeToTokenTransfers(e){}unsubscribeFromTokenTransfers(e){}unsubscribeFromAllTokenTransfers(){}getBalance(e,t){throw Error("Method not implemented.")}getBalances(e,t,r){throw Error("Method not implemented.")}async deposit(e,t,r,s){await (0,k.Dc)(1e3);let o={kind:i.gu.Deposit,status:i.hj.Pending,source:r,receiver:s,tezosOperation:{amount:e,token:t,hash:this.getTezosOperationHash(),timestamp:new Date().toLocaleString()}};return this.runDepositCycle(o),o}async startWithdraw(e,t,r,s){await (0,k.Dc)(1e3);let o={kind:i.gu.Withdrawal,status:i.hj.Pending,source:r,receiver:s,etherlinkOperation:{amount:e,token:t,hash:this.getEtherlinkOperationHash(),timestamp:this.getOperationTimestamp()}};return this.runWithdrawalCycle(o),o}async finishWithdraw(e){await (0,k.Dc)(3e3);let t=await this.tokensProvider.getRegisteredTokenPair(e.etherlinkOperation.token);this.updateTokenTransfer({...e,status:i.hj.Finished,tezosOperation:{blockId:0,hash:this.getTezosOperationHash(),amount:e.etherlinkOperation.amount,token:t.tezos.token,fee:0n,timestamp:this.getOperationTimestamp()}})}async runDepositCycle(e){await (0,k.Dc)(5e3),this.updateTokenTransfer({...e,status:i.hj.Created,tezosOperation:{...e.tezosOperation,blockId:0,fee:0n}}),await (0,k.Dc)(5e3);let t=await this.tokensProvider.getRegisteredTokenPair(e.tezosOperation.token);this.updateTokenTransfer({...e,status:i.hj.Finished,tezosOperation:{...e.tezosOperation,blockId:0,fee:0n},etherlinkOperation:{blockId:0,hash:this.getEtherlinkOperationHash(),amount:e.tezosOperation.amount,token:t.etherlink.token,fee:0n,timestamp:this.getOperationTimestamp()}})}async runWithdrawalCycle(e){await (0,k.Dc)(3e3);let t={outboxMessageLevel:3006623,outboxMessageIndex:0,commitment:"src12...",proof:"0300..."},r={...e.etherlinkOperation,blockId:0,fee:0n};this.updateTokenTransfer({...e,status:i.hj.Created,etherlinkOperation:r,rollupData:{outboxMessageLevel:t.outboxMessageLevel,outboxMessageIndex:t.outboxMessageIndex}}),await (0,k.Dc)(5e3),this.updateTokenTransfer({...e,status:i.hj.Sealed,etherlinkOperation:r,rollupData:t})}updateTokenTransfer(e){this.tokenTransfersStore.save(e),this.events.tokenTransferUpdated.emit(e)}getTezosOperationHash(){return(0,d.kM)(this.generateBytesString(64),d.O4.o)}getEtherlinkOperationHash(){return"0x".concat(this.generateBytesString(64))}getOperationTimestamp(){return new Date().toLocaleString()}generateBytesString(e){return[...Array(e)].map(()=>Math.floor(16*Math.random()).toString(16)).join("")}[Symbol.dispose](){}constructor(e){this.tokensProvider=e,this.defaultLoadDataLimit=100,this.tokenTransfersStore=new p("mock.transfers",e=>i.P6.getInitialOperationHash(e),(e,t)=>{if(!e)return t;let r=JSON.parse(t);for(let e of g)if(r[e])for(let t of f)r[e][t]&&(r[e][t]=BigInt(r[e][t]));return r},(e,t)=>"bigint"==typeof t?t.toString(10):t),this.events={tokenTransferCreated:new i.vp,tokenTransferUpdated:new i.vp},window.bridgeDataProviderMock=this}}var m=r(6143);class T{get etherlinkWallet(){return this._etherlinkWallet}async start(){if(!this.etherlinkWallet){let e=await this.loadMetaMaskEthereumProvider(3e3);e&&(this._etherlinkWallet=new h(e))}await this.tokenBridge.start()}loadMetaMaskEthereumProvider(e){return new Promise((t,r)=>{try{window.addEventListener("ethereum#initialized",()=>{t(window.ethereum)},{once:!0}),setTimeout(()=>{t(void 0)},e)}catch(e){r(e)}})}createTokenBridgeMock(){let e=new i.xh(m.fW),t=new w(e);return new u({tezos:{toolkit:this.tezosToolkit,bridgeOptions:{rollupAddress:l.v.tezos.smartRollupAddress}},etherlink:{toolkit:this.etherlinkToolkit,bridgeOptions:{kernelAddress:i.gt,withdrawPrecompileAddress:i.$z}},bridgeDataProviders:{tokens:e,transfers:t,balances:t}})}constructor(){let e=window.ethereum;this.etherlinkToolkit=new a.ZPm(e),this._etherlinkWallet=e?new h(e):null,this.tezosToolkit=new n.$N(l.v.tezos.rpcUrl),this.beaconWallet=new o.kx({name:l.v.appName,network:{type:s.td.CUSTOM,rpcUrl:l.v.tezos.rpcUrl},featuredWallets:["temple","atomex","metamask","trust"],colorMode:s.UX.DARK}),this.tezosWalletSigner=new c(this.beaconWallet),this.tezosToolkit.setWalletProvider(this.beaconWallet),this.tezosToolkit.setSignerProvider(this.tezosWalletSigner),this.beaconTezosWallet=this.beaconWallet.client,this.tokenBridge=l.v.isMock?this.createTokenBridgeMock():(0,i.uF)({tokenPairs:m.fW,dipDup:{baseUrl:l.v.dipDup.baseUrl,autoUpdate:{type:"websocket",webSocketApiBaseUrl:l.v.dipDup.webSocketApiBaseUrl}},tezos:{toolkit:this.tezosToolkit,rollupAddress:l.v.tezos.smartRollupAddress},etherlink:{toolkit:this.etherlinkToolkit}})}}}}]);